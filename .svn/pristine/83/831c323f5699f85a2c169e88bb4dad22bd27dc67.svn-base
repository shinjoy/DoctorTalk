package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.UserCol;
import kr.nomad.mars.dto.UserCvrisk;
import kr.nomad.mars.dto.UserWeight;
import kr.nomad.util.T;

public class UColDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper usercolMapper = new RowMapper() {
		public UserCol mapRow(ResultSet rs, int rowNum) throws SQLException {
			UserCol usercol = new UserCol();
			usercol.setColSeq(rs.getInt("col_seq"));
			usercol.setUserId(rs.getString("user_id"));
			usercol.setCol(rs.getInt("col"));
			usercol.setLdl(rs.getInt("ldl"));
			usercol.setTg(rs.getInt("tg"));
			usercol.setHdl(rs.getInt("hdl"));
			usercol.setRegDate(rs.getString("reg_date"));
			return usercol;
		}
	};
	
	
	//해당 아이디 데이터삭제
	
	public void deleteUserCol(String id) {
		String query = "DELETE FROM T_NF_USER_CHOLESTEROL WHERE user_id = ? ";
		this.jdbcTemplate.update(query, new Object[] { id  });
	}	
	
	//콜레스테롤 등록
	public void addUserCol(final UserCol usercol) {
		String query = "" +
				"INSERT INTO T_NF_USER_CHOLESTEROL " +
				"	(user_id, col, ldl, tg, hdl, reg_date) " +
				"VALUES " +
				"	(?, ?, ?, ?, ?, getDate()) ";
		this.jdbcTemplate.update(query, new Object[] {
		
			usercol.getUserId(),
			usercol.getCol(),
			usercol.getLdl(),
			usercol.getTg(),
			usercol.getHdl(),
		
		});
	}
	//콜레스테롤 차트
	public List<UserCol> getUserCol(String id) {
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_USER_CHOLESTEROL " +
				"WHERE user_id = ? ";
		return (List<UserCol>)this.jdbcTemplate.query(query, new Object[] { id }, this.usercolMapper);
	}
	
	//해당 seq 데이터삭제
	
	public void deleteUserCol(int seq) {
		String query = "DELETE FROM T_NF_USER_CHOLESTEROL WHERE col_seq= ? ";
		this.jdbcTemplate.update(query, new Object[] { seq  });
	}	
	
	
	//차트데이터
	public List<UserCol> getUserCol(String id,int page,int itemCountPerPage) { 
			String query = "" 
					+ "SELECT * FROM ("
					+"select"
					+ "		ROW_NUMBER() OVER(ORDER BY reg_date ASC) as row_seq, "
					+ " * "
					+ "from T_NF_USER_CHOLESTEROL where user_id = ? "
					+ ") AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+"";
			
		return (List<UserCol>)this.jdbcTemplate.query(query, new Object[] { id}, this.usercolMapper);
	}	
	
	//차트데이터갯수
		public int getUserColcnt(String id) { 
				String query = "" 
						+ "SELECT count(*) FROM "
						+"T_NF_USER_CHOLESTEROL where user_id = ? ";
			
				
			return this.jdbcTemplate.queryForInt(query, new Object[] { id });
		}	
	
	
	
	//해당아이디의 가장 높은거 있나업나
	
	public UserCol getUsertopCol(String id) {
		String query = "SELECT top 1 * FROM T_NF_USER_CHOLESTEROL "
				+ "WHERE user_id = ? ";
		
		try {
				return (UserCol)this.jdbcTemplate.queryForObject(query, new Object[] { id } ,this.usercolMapper);
		} catch (Exception e) {
			// TODO: handle exception
				return null;
		}
		
	}
	
	//그래프

	public List<UserCol> getUserCol(String id,String now,String before) { 
			String query = "" + 
					"select * from T_NF_USER_CHOLESTEROL where user_id = ? and reg_date between ? +' 00:00:00' and ? +' 23:59:00'"; 
			return (List<UserCol>)this.jdbcTemplate.query(query, new Object[] { id,before,now },this.usercolMapper);
	}
	

}
