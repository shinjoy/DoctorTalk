package kr.nomad.mars.dao;



import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.Cvrisk;
import kr.nomad.mars.dto.Period;
import kr.nomad.mars.dto.Pointer;
import kr.nomad.util.T;


public class PeriodDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper periodMapper = new RowMapper() {
		public Period mapRow(ResultSet rs, int rowNum) throws SQLException {
			Period period = new Period();
			period.setPreSeq(rs.getInt("pre_seq"));
			period.setSort(rs.getInt("sort"));
			period.setDiseaseId(rs.getString("disease_id"));
			period.setComment(rs.getString("comment"));
			period.setKind(rs.getInt("kind"));
			period.setPseq(rs.getInt("pseq"));
			period.setAskind(rs.getInt("askind"));
			period.setMove(rs.getInt("move"));
			period.setValue(rs.getString("value"));
			return period;
		}
	};
	
	public List<Period> getPeriod(int kind) {
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_DOCTOR_PERIOD " +
				"WHERE askind = 1 and kind= ? "+
				"ORDER BY sort ASC";
		return (List<Period>)this.jdbcTemplate.query(query, new Object[] { kind }, this.periodMapper);
	}
	
	public List<Period> getPeriodAnswerList(int kind) {
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_DOCTOR_PERIOD " +
				"WHERE askind = 2 and kind= ? "+ 
				"ORDER BY sort ASC ";
		return (List<Period>)this.jdbcTemplate.query(query, new Object[] { kind }, this.periodMapper);
	}	

	public Period getPeriodAnswer(String id) {
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_DOCTOR_PERIOD " +
				"WHERE disease_id = ? " ;
		
		try {
			return (Period)this.jdbcTemplate.queryForObject(query, new Object[] { id }, this.periodMapper);
			
		} catch (Exception e) {
			// TODO: handle exception
			return null;
		}
	}	
	
	///////////////////////////////////
	
	public void addPeriod(final Period period) {
		String query = "" +
				"INSERT INTO T_NF_DOCTOR_PERIOD " +
				"	(sort, disease_id, comment, kind, pseq, askind, move, value, is_last) " +
				"VALUES " +
				"	( ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			period.getSort(),
			period.getDiseaseId(),
			period.getComment(),
			period.getKind(),
			period.getPseq(),
			period.getAskind(),
			period.getMove(),
			period.getValue(),
			period.getIsLast()
		});
	}

	public void deletePeriod(int pre_seq) {
		String query = "DELETE FROM T_NF_DOCTOR_PERIOD WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { pre_seq });
	}

	public void updatePeriod(Period period) { 
		String query = "" + 
				"UPDATE T_NF_DOCTOR_PERIOD SET " +
				"	sort = ?, " +
				"	disease_id = ?, " +
				"	comment = ?, " +
				"	kind = ?, " +
				"	pseq = ?, " +
				"	askind = ?, " +
				"	move = ?, " +
				"	value = ?, " +
				"	is_last = ? " +
				"WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			period.getSort(),
			period.getDiseaseId(),
			period.getComment(),
			period.getKind(),
			period.getPseq(),
			period.getAskind(),
			period.getMove(),
			period.getValue(),
			period.getIsLast(),
			period.getPreSeq()
		});
	}

	public Period getPeriodSelect(int pre_seq) {
		String query = "" + 
				"SELECT pre_seq, sort, disease_id, comment, kind, pseq, askind, move, value, is_last " +
				"FROM T_NF_DOCTOR_PERIOD " +
				"WHERE pre_seq = ? ";
		return (Period)this.jdbcTemplate.queryForObject(query, new Object[] { pre_seq }, this.periodMapper);
	}

	
	
	/////////////// 관리자
	
	
	public void updatePeriodTable(Period period) { 
		String query = "" + 
				"UPDATE T_NF_DOCTOR_PERIOD SET " +
				"	comment = ?, " +
				"	pseq = ?, " +
				"	move = ?, " +
				"WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			period.getComment(),
			period.getPseq(),
			period.getMove(),
			period.getPreSeq()
		});
	}

	public List<Period> getPeriodList(int page, int itemCountPerPage) {
		
		List<Period> result = null;

		String query = ""
				+ "	SELECT * FROM ( "
				+ "	SELECT "
				+ "		ROW_NUMBER() OVER(ORDER BY sort asc ) AS row_seq, "
				+ "		* "
				+ "	FROM T_NF_DOCTOR_PERIOD"
				+ ") AS row WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") + 1 AND "+page+" * "+itemCountPerPage+" ";
				
		result = (List<Period>)this.jdbcTemplate.query(query, this.periodMapper);
		
		return result;
	}
	
	
	public int getCount() {
		int result = 0;		
		String query = "SELECT COUNT(*) AS cnt FROM T_NF_DOCTOR_PERIOD ";
		result = this.jdbcTemplate.queryForInt(query);
				
		return result;
	}
	
	
	// ���̺� ���� ���� ó�� 
	public void updatePeriod(String comment, int eper_seq) { 
		String query = "" + 
				"UPDATE T_NF_DOCTOR_PERIOD SET " +
				"	comment = ? " +
				"WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {comment ,eper_seq});
	}
	
	// ���İ� ����
	public void updatePeriod(int sort ,int eper_seq) { 
		
		String query = "" + 
				"UPDATE T_NF_DOCTOR_PERIOD SET " +
				"	sort = ? " +
				" WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {sort,eper_seq});
	}
	
	// üũ�� ����
	public void updatePeriodIsLast(int is_last ,int eper_seq) { 
		
		String query = "" + 
				"UPDATE T_NF_DOCTOR_PERIOD SET " +
				"	is_last = ? " +
				" WHERE pre_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {is_last,eper_seq});
	}
	
	
	

}
