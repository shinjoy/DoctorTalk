package kr.nomad.mars.dao;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;






import kr.nomad.mars.dto.UserBasic;
import kr.nomad.mars.dto.UserBlood;
import kr.nomad.mars.dto.UserMedi;
import kr.nomad.util.T;

public class UMediDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper usermediMapper = new RowMapper() {
		public UserMedi mapRow(ResultSet rs, int rowNum) throws SQLException {
			UserMedi usermedi = new UserMedi();
			usermedi.setMediSeq(rs.getInt("medi_seq"));
			usermedi.setUserId(rs.getString("user_id"));
			usermedi.setMediname(rs.getString("mediname"));
			usermedi.setMeditime(rs.getString("meditime"));
			usermedi.setMedialert(rs.getInt("medialert"));
			usermedi.setMediweek1(rs.getInt("mediweek1"));
			usermedi.setMediweek2(rs.getInt("mediweek2"));
			usermedi.setMediweek3(rs.getInt("mediweek3"));
			usermedi.setMediweek4(rs.getInt("mediweek4"));
			usermedi.setMediweek5(rs.getInt("mediweek5"));
			usermedi.setMediweek6(rs.getInt("mediweek6"));
			usermedi.setMediweek7(rs.getInt("mediweek7"));
			usermedi.setMedihospital(rs.getString("medihospital"));
			return usermedi;
		}
	};
	private RowMapper usermediMapper2 = new RowMapper() {
		public UserMedi mapRow(ResultSet rs, int rowNum) throws SQLException {
			UserMedi usermedi = new UserMedi();
			usermedi.setMediSeq(rs.getInt("medi_seq"));
			usermedi.setUserId(rs.getString("user_id"));
			usermedi.setMediname(rs.getString("mediname"));
			usermedi.setMeditime(rs.getString("meditime"));
			usermedi.setMedialert(rs.getInt("medialert"));
			usermedi.setMediweek1(rs.getInt("mediweek1"));
			usermedi.setMediweek2(rs.getInt("mediweek2"));
			usermedi.setMediweek3(rs.getInt("mediweek3"));
			usermedi.setMediweek4(rs.getInt("mediweek4"));
			usermedi.setMediweek5(rs.getInt("mediweek5"));
			usermedi.setMediweek6(rs.getInt("mediweek6"));
			usermedi.setMediweek7(rs.getInt("mediweek7"));
			usermedi.setMedihospital(rs.getString("medihospital"));
			usermedi.setEatLog(rs.getInt("eat_log"));
			return usermedi;
		}
	};
	
	//해당아이디의 복약리스트
	
		public List<UserMedi> getUserMediList(String id, int week, int page, int itemCountPerPage) {
				
			String query = ""
					+ "SELECT * FROM ("
					+ "	SELECT "
					+ "		ROW_NUMBER() OVER(ORDER BY medi_seq ASC) as row_seq, "
					+ "		* "
					+ "	FROM T_NF_USER_MEDICINE WHERE user_id = ? AND mediweek"+week+" = 1 "
					+ ") AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+"";
			try {
				return (List<UserMedi>)this.jdbcTemplate.query(query, new Object[] { id } ,this.usermediMapper);
			} catch (Exception e) {
				// TODO: handle exception
				return null;
			}	
			
		}
		
		//해당아이디의 복약리스트
		
			public List<UserMedi> getUserMediList(String id,  int page, int itemCountPerPage) {
					
				String query = ""
						+ "SELECT * FROM ("
						+ "	SELECT "
						+ "		ROW_NUMBER() OVER(ORDER BY medi_seq ASC) as row_seq, "
						+ "		* "
						+ "	FROM T_NF_USER_MEDICINE WHERE user_id = ? "
						+ ") AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+"";
				try {
					return (List<UserMedi>)this.jdbcTemplate.query(query, new Object[] { id } ,this.usermediMapper);
				} catch (Exception e) {
					// TODO: handle exception
					return null;
				}	
				
			}

		public List<UserMedi> getUserMediList(String id, int week, String date, int page, int itemCountPerPage) {
				
			String query = ""
					+ "SELECT * FROM ("
					+ "	SELECT "
					+ "		ROW_NUMBER() OVER(ORDER BY medi_seq ASC) as row_seq, "
					+ "		*, "
					+ "		(SELECT count(*) FROM T_NF_USER_MEDICINE_LOG WHERE med_seq = m.medi_seq AND convert(char(10),GETDATE(),120) = ?) as eat_log "
					+ "	FROM T_NF_USER_MEDICINE as m "
					+ "	WHERE user_id = ? AND mediweek"+week+" = 1 "
					+ ") AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+"";
			try {
				return (List<UserMedi>)this.jdbcTemplate.query(query, new Object[] { date, id } ,this.usermediMapper2);
			} catch (Exception e) {
				// TODO: handle exception
				return null;
			}	
			
		}
	
	
	
		//복약 갯수
		
		public int getUserMedicnt(String id, int week) {
				
			String query = ""
					+ "SELECT count(*) "
					+ "FROM T_NF_USER_MEDICINE WHERE user_id = ? AND mediweek"+week+" = 1 ";
				
			try {
				return this.jdbcTemplate.queryForInt(query, new Object[] { id } );
			} catch (Exception e) {
				// TODO: handle exception
				return 0;
			}	
			
		}
		
		//복약 갯수
		
		public int getUserMedicnt(String id) {
				
			String query = ""
					+ "SELECT count(*) "
					+ "FROM T_NF_USER_MEDICINE WHERE user_id = ?  ";
				
			try {
				return this.jdbcTemplate.queryForInt(query, new Object[] { id } );
			} catch (Exception e) {
				// TODO: handle exception
				return 0;
			}	
			
		}
	
	// 관리자 사용자 정보
	
		// 관리자 유저정보 가지고 오기
	public UserMedi getUserMediView(String id) {
		
		String query = "" + 
				"SELECT  TOP 1  * FROM T_NF_USER_MEDICINE WHERE user_id = ? ORDER BY medi_seq desc" ;
		try {
			return (UserMedi)this.jdbcTemplate.queryForObject(query, new Object[] {id}, this.usermediMapper);
		} catch (Exception e) {
			// TODO: handle exception
			return null;
		}
		
	}
	
	//유저의 전체 복약정보 데이터
	public List<UserMedi> getUserMediAdmin(String userId) { 
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_USER_MEDICINE " +
				"WHERE user_id = ? ";
		return (List<UserMedi>)this.jdbcTemplate.query(query, new Object[] { userId }, this.usermediMapper);
	}
	
	
	
	
	/** 유저의 전체 복약정보 데이터 갯수 **/
	public int getCount(String userId) {
	    String query = " SELECT COUNT(*) FROM T_NF_USER_MEDICINE WHERE user_id =  ?  ";
	    return this.jdbcTemplate.queryForInt(query, new Object[] {userId});
	}
	
	
	
	
	//복약등록
	public void addUserMedi(UserMedi usermedi) {
		String query = "" +
				"INSERT INTO T_NF_USER_MEDICINE " +
			
				"	(user_id, mediname, meditime, medialert,mediweek1,mediweek2,mediweek3,mediweek4,mediweek5,mediweek6,mediweek7,medihospital) " +
				"VALUES " +
				"	(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			usermedi.getUserId(),
			usermedi.getMediname(),
			usermedi.getMeditime(),
			usermedi.getMedialert(),
			usermedi.getMediweek1(),
			usermedi.getMediweek2(),
			usermedi.getMediweek3(),
			usermedi.getMediweek4(),
			usermedi.getMediweek5(),
			usermedi.getMediweek6(),
			usermedi.getMediweek7(),
			usermedi.getMedihospital()
		});
	}
	



	
	//복약수정 
	public void updateUserMedi(UserMedi usermedi) { 
		String query = "" + 
				"UPDATE T_NF_USER_MEDICINE SET " +
				"	mediname = ?, " +
				"	meditime = ?, " +
				"	medialert = ?, " +
				"	mediweek1 = ?, " +
				"	mediweek2 = ?, " +
				"	mediweek3 = ?, " +
				"	mediweek4 = ?, " +
				"	mediweek5 = ?, " +
				"	mediweek6 = ?, " +
				"	mediweek7 = ?, " +
				"   medihospital = ?"+
				"WHERE medi_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			
			
			usermedi.getMediname(),
			usermedi.getMeditime(),
			usermedi.getMedialert(),
			usermedi.getMediweek1(),
			usermedi.getMediweek2(),
			usermedi.getMediweek3(),
			usermedi.getMediweek4(),
			usermedi.getMediweek5(),
			usermedi.getMediweek6(),
			usermedi.getMediweek7(),
			usermedi.getMedihospital(),
			usermedi.getMediSeq()
			
		});
	}
	
	//복약 삭제
	
	public void deleteUserMedi(int medi_seq) {
		String query = "DELETE FROM T_NF_USER_MEDICINE WHERE medi_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { medi_seq });
	}

	

	public UserMedi getUserMedi(String medi_seq) {
		String query = "" + 
				"SELECT medi_seq, user_id, mediname, meditime, medialert " +
				"FROM T_NF_USER_MEDICINE " +
				"WHERE medi_seq = ? ";
		return (UserMedi)this.jdbcTemplate.queryForObject(query, new Object[] { medi_seq }, this.usermediMapper);
	}
	
	//해당아이디 데이터삭제
	
	public void deleteUserMedi2(String id) {
		String query = "DELETE FROM T_NF_USER_MEDICINE WHERE user_id = ? ";
		try {
				this.jdbcTemplate.update(query, new Object[] { id });
		} catch (Exception e) {
			// TODO: handle exception
		}
	}


/*	public List<UserMedi> getUserMediList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" medi_seq, user_id, mediname, meditime, medialert " +
				"FROM T_NF_USER_MEDICINE " +
				"WHERE medi_seq <= ( " +
				"	SELECT MIN(medi_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" medi_seq " +
				"		FROM T_NF_USER_MEDICINE " +
				"		ORDER BY medi_seq DESC " +
				"	) AS A) " +
				"ORDER BY medi_seq DESC";
		return (List<UserMedi>)this.jdbcTemplate.query(query, this.usermediMapper);
	}*/

}
