
package kr.nomad.mars;

import java.io.File;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeUtility;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.nomad.mars.dao.MagagineDao;
import kr.nomad.mars.dao.UbloodDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.DoctorMagagine;
import kr.nomad.mars.dto.User;
import kr.nomad.mars.dto.UserBlood;
import kr.nomad.util.F;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.MtB;
import kr.nomad.util.MyAuthenticator;
import kr.nomad.util.Response;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

import encrypt.Sha256Util;

@Controller
public class ServerController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@Autowired UserDao userdao;
	
	@Autowired MagagineDao magaginedao;
	
	@Autowired UbloodDao ublooddao;

	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;
	
	
	public String GOOGLE_MAIL_ID = "csk740222@gmail.com";
	public String GOOGLE_MAIL_PW = "csk740222";

	private int category1;
	
	
	
	@RequestMapping("/api_view.go")
	public String wUserMenuController(
	        Model model
	    ) {
	 
	    return "/api_view";
	}
	/**
	 * 회원가입
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/join.go")
	public String joinController(
			User user,
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		try {
			boolean userCheck = userdao.correctId(user.getUserId());
			if (userCheck) {
				map.put("result", false);
				map.put("message", "존재하는 아이디 입니다.");
			} else {
				
				String enPw = Sha256Util.encryptPassword(user.getPassword());
				

				user.setPassword(enPw);
				userdao.addUser(user);

				map.put("result", true);
				map.put("message", "회원가입되었습니다.");
			}
		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}
		 
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		
		
		
		
		return null;
	
	}
	
	
	/**
	 * 로그인
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/login.go")
	public String loginController(
			User user,
			HttpServletRequest req, HttpServletResponse res
		) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		String enPw = "";
		try {
			boolean userCheck = userdao.correctId(user.getUserId());
			if (userCheck == true) {

				enPw = Sha256Util.encryptPassword(user.getPassword());
				boolean loginCheck = userdao.correctPw(user.getUserId(), enPw);

				if (loginCheck == true) {

					User userdata = userdao.getUsers(user.getUserId());
					HttpSession session = req.getSession();
					session.setAttribute("USER_ID", userdata.getUserId());
					session.setAttribute("USER_NAME", userdata.getUserName());
					
					userdao.updateUserData(user);
					
					map.put("message", "로그인이 성공되었습니다.");
					map.put("result", true);
					map.put("userName", userdata.getUserName());
					map.put("userType", userdata.getUserType());

				} else {
					map.put("message", "패스워드가 일치하지 않습니다.");
					map.put("result", false);
					map.put("userType", 3);
				}

			} else {
				map.put("message", "해당 ID가 존재하지 않거나 ID가 일치하지 않습니다.");
				map.put("result", false);
				map.put("userType", 3);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
			map.put("userType", 3);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	

	/**
	 * 아이디중복체크
	 *  
	 * @return
	 */
	
	@RequestMapping("/m/dup_check_id.go")
	public String checkIdController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId,
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean userCheck = userdao.correctId(userId);
			if (userCheck == true) {

				map.put("message", "중복된 이메일 주소입니다 다른주소로 입력해주세요. "
						+ "지속적인 문제 발생시 (관리자이메일)로 이메일을 보내주세요");
				map.put("result", true);
				

			} else {
				
				map.put("message", "사용가능한 이메일입니다.");
				map.put("result", false);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
		
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		return null;
	}
	
	/**
	 * 전화번호중복체크
	
	 * @return
	 */
	
	@RequestMapping("/m/dup_check_phone.go")
	public String checkPhoneController(
			@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean phoneCheck = userdao.correctPhone(phoneNumber);
			if (phoneCheck == true) {

				map.put("message", "사용중인 전화번호 입니다.");
				map.put("result", true);
				

			} else {
				
				map.put("message", "사용할 수 있는 전화번호입니다.");
				map.put("result", false);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
			
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		return null;
	}
	
	/**
	 * 아이디찾기
	
	 * @return
	 */
		@RequestMapping("/m/myid.go")
		public String searchIdController(
				@RequestParam(value="userName", required=false, defaultValue="") String userName,
				@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
		

			try{
					User user = userdao.findId(phoneNumber,userName);
					
					if ( user!=null) {
						String userId = user.getUserId();
						map.put("message","userId"+userId);
						map.put("result", true);
		
					} else {
						map.put("message", "회원님의 ID를 찾을 수 없습니다."
								+"아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
						map.put("result", false);
		
					}
				}catch(Exception e){
					map.put("result", false);
					map.put("message", "error : "+e.getMessage());
					
				}
			 

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		
		/**
		 * 비밀번호찾기
		
		 * @return
		 */
		
		
		@RequestMapping("/m/mypass.go")
		public String searchPwController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();


			boolean userCheck = userdao.findPw(userId, phoneNumber);
			if (userCheck == false) {
				map.put("result", false);
				map.put("message", "회원님의 데이터를 찾을 수 없습니다."
						+"아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
			} else {
				try{
					
					map.put("result", true);
					map.put("message", "비밀번호를 재설정해주세요.");
			    }catch(Exception e){
					map.put("result", false);
					map.put("message", "error : "+e.getMessage());
			    }
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		

		/**
		 * 비밀번호재설정
		
		 * @return
		 */
		
		
		@RequestMapping("/m/new_mypass.go")
		public String updatePwController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="password", required=false, defaultValue="") String password, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			
			try{
				String enPw = Sha256Util.encryptPassword(password);
				userdao.updatePw(userId, enPw);
				map.put("result", true);
				map.put("message", "완료되었습니다.");
			}catch(Exception e){
				map.put("result", false);
				map.put("message", "error : "+e.getMessage());
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
/*		*//**
		 * 건강매거진
		
		 * @return
		 *//*
		
		
		@RequestMapping("/m/maga_list.go")
		public String magaListController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			User user =userdao.getUsers(userId);
			String joindate = user.getRegDate();
			
			List<DoctorMagagine> magalist =magaginedao.getDoctorMagagineList();
			
			map.put("result", true);
			map.put("joindate", joindate);
			map.put("magalist", magalist);
			

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		*//**
		 * 매거진
		
		 * @return
		 *//*
		
		
		@RequestMapping("/m/maga_health.go")
		public String magaHealthController(
				@RequestParam(value="magaSeq", required=false, defaultValue="") int magaSeq,
				@RequestParam(value="kind", required=false, defaultValue="") int kind, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			if(kind == 0){
				DoctorMagagine tdm =magaginedao.getTopMagagine(magaSeq); //상위 컨텐츠
				List<DoctorMagagine> sublist =magaginedao.getSubMagagine(magaSeq); //하위 컨텐츠
				map.put("topmagazine", tdm);
				map.put("submagazine", sublist);
				
			}
			else{
				DoctorMagagine sdm =magaginedao.getTopMagagine(magaSeq);
				map.put("submagazine", sdm);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}*/
		
	    
		/* * 수행내역리스트
		
		 * @return
		 **/
		
		
		@RequestMapping("/m/maga_health.go")
		public String magaReportController(
				@RequestParam(value="userId", required=false, defaultValue="") String id,
				@RequestParam(value="month", required=false, defaultValue="") String month, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			int bcnt= ublooddao.getUserBloodList(id, month);
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
	
	

	
		
}
