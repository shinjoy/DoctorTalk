package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import javax.sql.DataSource;

import kr.nomad.mars.dto.Config;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

public class ConfigDao {
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper configMapper = new RowMapper() {
		public Config mapRow(ResultSet rs, int rowNum) throws SQLException {
			Config config = new Config();
			config.setAppSeq(rs.getInt("app_seq"));
			config.setAppVersion(rs.getString("app_version"));
			return config;
		}
	};

	public void addConfig(final Config config) {
		String query = "" +
				"INSERT INTO T_NF_CONFIG " +
				"	(app_seq, app_version) " +
				"VALUES " +
				"	(?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			config.getAppSeq(),
			config.getAppVersion()
		});
	}

	public void deleteConfig(String app_seq) {
		String query = "DELETE FROM T_NF_CONFIG WHERE app_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { app_seq });
	}

	public void updateConfig(Config config) { 
		String query = "" + 
				"UPDATE T_NF_CONFIG SET " +
				"	app_seq = ?, " +
				"	app_version = ? " +
				"WHERE app_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			config.getAppSeq(),
			config.getAppVersion()
		});
	}

	public Config getConfig() {
		String query = "" + 
				"SELECT app_seq, app_version " +
				"FROM T_NF_CONFIG ";
		return (Config)this.jdbcTemplate.queryForObject(query, this.configMapper);
	}


}
