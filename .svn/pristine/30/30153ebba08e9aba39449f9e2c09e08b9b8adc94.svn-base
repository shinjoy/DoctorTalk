package kr.nomad.mars.dao;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;



import kr.nomad.mars.dto.UserBasic;
import kr.nomad.mars.dto.UserMedi;
import kr.nomad.util.T;

public class UMediDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper usermediMapper = new RowMapper() {
		public UserMedi mapRow(ResultSet rs, int rowNum) throws SQLException {
			UserMedi usermedi = new UserMedi();
			usermedi.setMediSeq(rs.getInt("medi_seq"));
			usermedi.setUserId(rs.getString("user_id"));
			usermedi.setMediname(rs.getString("mediname"));
			usermedi.setMeditime(rs.getString("meditime"));
			usermedi.setMedialert(rs.getInt("medialert"));
			return usermedi;
		}
	};
	
	//해당아이디의 복약리스트
	
	public List<UserMedi> getUserMediList(String id,int page,int itemCountPerPage) {
			
		String query = ""
				+ "SELECT * FROM ("
				+ "SELECT "
				+ "		ROW_NUMBER() OVER(ORDER BY medi_seq ASC) as row_seq, "
				+ "* "
				+ "FROM T_NF_USER_MEDICINE WHERE user_id = ? "
				+ ") AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+"";
		try {
			return (List<UserMedi>)this.jdbcTemplate.query(query, new Object[] { id } ,this.usermediMapper);
		} catch (Exception e) {
			// TODO: handle exception
			return null;
		}	
		
	}
	
	//복약 갯수
	
	public int getUserMedicnt(String id) {
			
		String query = ""
				+ "SELECT count(*) "
				+ "FROM T_NF_USER_MEDICINE WHERE user_id = ? ";
			
		try {
			return this.jdbcTemplate.queryForInt(query, new Object[] { id } );
		} catch (Exception e) {
			// TODO: handle exception
			return 0;
		}	
		
	}
	
	// 관리자 사용자 정보
	// 관리자 유저정보 가지고 오기
	public UserMedi getUserMediView(String id) {
		String query = "" + 
				"SELECT * " +
				"FROM T_NF_USER_BASIC " +
				"WHERE user_id = ?";
		try {
			return (UserMedi)this.jdbcTemplate.queryForObject(query, new Object[] {id}, this.usermediMapper);
		} catch (Exception e) {
			// TODO: handle exception
			return null;
		}
		
	}
	
	
	
	
	//복약등록
	
	public void addUserMedi(UserMedi usermedi) {
		String query = "" +
				"INSERT INTO T_NF_USER_MEDICINE " +
				"	(user_id, mediname, meditime, medialert) " +
				"VALUES " +
				"	(?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			usermedi.getUserId(),
			usermedi.getMediname(),
			usermedi.getMeditime(),
			usermedi.getMedialert()
		});
	}
	
	//복약수정 
	
	public void updateUserMedi(UserMedi usermedi) { 
		String query = "" + 
				"UPDATE T_NF_USER_MEDICINE SET " +
				"	mediname = ?, " +
				"	meditime = ?, " +
				"	medialert = ? " +
				"WHERE medi_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			usermedi.getMediSeq(),
			usermedi.getMediname(),
			usermedi.getMeditime(),
			usermedi.getMedialert()
		});
	}
	
	//복약 삭제
	
	public void deleteUserMedi(int medi_seq) {
		String query = "DELETE FROM T_NF_USER_MEDICINE WHERE medi_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { medi_seq });
	}

	

	public UserMedi getUserMedi(String medi_seq) {
		String query = "" + 
				"SELECT medi_seq, user_id, mediname, meditime, medialert " +
				"FROM T_NF_USER_MEDICINE " +
				"WHERE medi_seq = ? ";
		return (UserMedi)this.jdbcTemplate.queryForObject(query, new Object[] { medi_seq }, this.usermediMapper);
	}
	
	//해당아이디 데이터삭제
	
	public void deleteUserMedi2(String id) {
		String query = "DELETE FROM T_NF_USER_MEDICINE WHERE user_id = ? ";
		try {
				this.jdbcTemplate.update(query, new Object[] { id });
		} catch (Exception e) {
			// TODO: handle exception
		}
	}


/*	public List<UserMedi> getUserMediList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" medi_seq, user_id, mediname, meditime, medialert " +
				"FROM T_NF_USER_MEDICINE " +
				"WHERE medi_seq <= ( " +
				"	SELECT MIN(medi_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" medi_seq " +
				"		FROM T_NF_USER_MEDICINE " +
				"		ORDER BY medi_seq DESC " +
				"	) AS A) " +
				"ORDER BY medi_seq DESC";
		return (List<UserMedi>)this.jdbcTemplate.query(query, this.usermediMapper);
	}*/

}
