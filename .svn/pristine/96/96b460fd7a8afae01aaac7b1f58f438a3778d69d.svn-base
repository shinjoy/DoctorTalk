/*package kr.nomad.mars;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;






import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.User;
import kr.nomad.util.F;
import kr.nomad.util.Paging;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

import encrypt.Sha256Util;

@Controller
public class AdminController {
	@Autowired
	NoticeDao noticeDao;
	
	@Autowired
	UserDao userDao;
	
	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;

	// 관리자 메인
	@RequestMapping("/admin/main.go")
	public String adminMainController(HttpSession session, Model model) {

		int topCount = 8;

		// List<Notice> noticeList = noticeDao.getNoticeTopList(topCount);
		// List<Faq> faqList = faqDao.getFaqTopList(topCount);
		// List<Analysis> anaList = analysisDao.getAnalysisTopList(topCount);
		//
		// model.addAttribute("noticeList", noticeList);
		// model.addAttribute("faqList", faqList);
		// model.addAttribute("anaList", anaList);
		return "/admin/main";
	}
	
	
	// 회원 관리 > 일반회원
	@RequestMapping("/admin/user/user.go")
	public String userController(HttpSession session, Model model) {
	
		
		return "/admin/user/user";
	}

	// 회원 관리 > 일반회원 리스트
	@RequestMapping("/admin/user/user_list.go")
	public String userListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
			@RequestParam(value = "age", required = false, defaultValue = "0") int age,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<User> list = null;
		int count = 0;

		list = userDao.getUserList(gender,age,keyword,page, ITEM_COUNT_PER_PAGE);
		count = userDao.getCount(gender,age,keyword);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/user/user_list";
	}

	// 일반회원 혈당 상세보기
	@RequestMapping("/admin/user/user_view.go")
	public String userViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

//		List<GuestBook> list = null;
		int count = 0;
		
		User user; 
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
//		list = guestbookDao.getGuestBookList(userId, page,ITEM_COUNT_PER_PAGE);
//		count = guestbookDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		model.addAttribute("user", user);
//		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view";
	}
	
	
	
	// 일반회원 혈압 상세보기
	@RequestMapping("/admin/user/user_view_pressure.go")
	public String userPressureViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

//		List<GuestBook> list = null;
		int count = 0;
		
		User user; 
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
//		list = guestbookDao.getGuestBookList(userId, page,ITEM_COUNT_PER_PAGE);
//		count = guestbookDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		model.addAttribute("user", user);
//		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_pressure";
	}
	
	// 일반회원 체중 상세보기
	@RequestMapping("/admin/user/user_view_weight.go")
	public String userWeightViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

//		List<GuestBook> list = null;
		int count = 0;
		
		User user; 
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
//		list = guestbookDao.getGuestBookList(userId, page,ITEM_COUNT_PER_PAGE);
//		count = guestbookDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		model.addAttribute("user", user);
//		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_weight";
	}
	

	
	// 일반회원 콜레스테롤 상세보기
	@RequestMapping("/admin/user/user_view_cholesterol.go")
	public String userCholesterolViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

//		List<GuestBook> list = null;
		int count = 0;
		
		User user; 
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
//		list = guestbookDao.getGuestBookList(userId, page,ITEM_COUNT_PER_PAGE);
//		count = guestbookDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		model.addAttribute("user", user);
//		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_cholesterol";
	}
	
	
	// 일반회원 체중 상세보기
	@RequestMapping("/admin/user/user_view_hemoglobin.go")
	public String userHemoglobinViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

//		List<GuestBook> list = null;
		int count = 0;
		
		User user; 
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
//		list = guestbookDao.getGuestBookList(userId, page,ITEM_COUNT_PER_PAGE);
//		count = guestbookDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		model.addAttribute("user", user);
//		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_hemoglobin";
	}
	

	// 일반회원 수정 삭제
	@RequestMapping("/admin/user/user_edit.go")
	public String userListController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {


		User user = null;

		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		
		model.addAttribute("user", user);
		return "/admin/user/user_edit";
	}

	// 일반회원 등록 수정 처리
	@RequestMapping("/admin/user/user_edit_do.go")
	public String userEditDoController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			
			User user = userDao.getUser(userId);
			userDao.updateUser(user);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		
		map.put("result", result);
		map.put("message", message);

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 일반회원 삭제
	@RequestMapping("/admin/user/user_delete_do.go")
	public String companyDeleteDoController(			
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		

		try {
			// 일반회원 삭제
			userDao.deleteUser(userId);

			map.put("message", "사용자가 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "사용자가 삭제되지 않았습니다.\n"+e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		

		return null;
	}

//	// 회원 관리 > 포인트 설정
//	@RequestMapping("/admin/user/set_point.go")
//	public String pointController(
//			HttpSession session, Model model) {
//		
//		return "/admin/user/set_point";
//	}
//
//	// 회원 관리 > 포인트 설정 리스트
//	@RequestMapping("/admin/user/point_list.go")
//	public String pointListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "category1", required = false, defaultValue = "0") int category1,
//			@RequestParam(value = "category2", required = false, defaultValue = "0") int category2,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//	    List<Point> list = null;
//	    int count = 0;
//		
//		list = pointDao.getPointList(page, ITEM_COUNT_PER_PAGE);
//		count = pointDao.getCount();
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/user/point_list";
//	}
//	
//	
//	// 포인트 등록, 수정의 처리
//		@RequestMapping("/admin/user/point_edit_do.go")
//		public String pointEditDoController(
//				HttpServletRequest req,
//				@RequestParam(value = "pointSeq", required = false, defaultValue = "0") int pointSeq,
//				@RequestParam(value = "eventName", required = false, defaultValue = "") String eventName,
//				@RequestParam(value = "point", required = false, defaultValue = "0") int point,
//				@RequestParam(value = "money", required = false, defaultValue = "0") int money,
//				@RequestParam(value = "period", required = false, defaultValue = "0") int period,
//				@RequestParam(value = "times", required = false, defaultValue = "0") int times,
//				@RequestParam(value = "commend", required = false, defaultValue = "") String commend,
//				HttpServletResponse res, Model model) throws IllegalStateException,
//				IOException {
//
//			Map<String, Object> map = new HashMap<String, Object>();
//			boolean result = true;
//			String message = "";
//			
//			try {
//				if (pointSeq == 0) {
//					Point pointinput = new Point();
//					pointinput.setEventName(eventName);
//					pointinput.setPoint(point);
//					pointinput.setMoney(money);
//					pointinput.setPeriod(period);
//					pointinput.setTimes(times);
//					pointinput.setCommend(commend);
//					pointDao.addPoint(pointinput);
////					pointSeq = pointDao.getLastSeq();
//					result = true;
//					message = "등록되었습니다.";
//					
//				} else {
//					Point pointinput = pointDao.getPoint(pointSeq);
//					pointinput.setEventName(eventName);
//					pointinput.setPoint(point);
//					pointinput.setMoney(money);
//					pointinput.setPeriod(period);
//					pointinput.setTimes(times);
//					pointinput.setCommend(commend);
//					pointDao.updatePoint(pointinput);
//					result = true;
//					message = "수정되었습니다.";
//				}
//			} catch (Exception e) {
//				message = e.getMessage();
//			}
//			 map.put("pointSeq", pointSeq);
//			 map.put("result", result);
//			 map.put("message", message);
//			
//			JSONObject jsonObject = JSONObject.fromObject(map);
//			Response.responseWrite(res, jsonObject);
//			return null;
//		}
//	
//	
//	
//	// 포인트 설정 삭제
//	@RequestMapping("/admin/user/level_delete_do.go")
//	public String pointDeleteDoController(@RequestParam int pointSeq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 포인트 설정 삭제
//			pointDao.deletePoint(pointSeq);
//
//			map.put("message", "삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//		
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//	
//
//	// 회원 관리 > 포인트 충전 설정
//	@RequestMapping("/admin/user/set_point_charge.go")
//	public String chargeController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "category1", required = false, defaultValue = "0") int category1,
//			@RequestParam(value = "category2", required = false, defaultValue = "0") int category2,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("category1", category1);
//		model.addAttribute("category2", category2);
//		return "/admin/user/set_point_charge";
//	}
//
//	// 회원 관리 > 포인트 충전 설정 리스트
//	@RequestMapping("/admin/user/charge_list.go")
//	public String chargeListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			HttpSession session, Model model) {
//
//		List<PointCharge> list = null;
//		int count = 0;
//
//		list = pointChargeDao.getPointChargeList(page, ITEM_COUNT_PER_PAGE);
//		count = pointChargeDao.getCount();
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("currentPage", page);
//		return "admin/user/charge_list";
//	}
//	
//	
//	
//	// 포인트 충전 등록, 수정의 처리
//			@RequestMapping("/admin/user/charge_edit_do.go")
//			public String chargeEditDoController(
//					HttpServletRequest req,
//					@RequestParam(value = "chargeSeq", required = false, defaultValue = "0") int chargeSeq,
//					@RequestParam(value = "chargeMoney", required = false, defaultValue = "0") int chargeMoney,
//					@RequestParam(value = "chargePoint", required = false, defaultValue = "0") int chargePoint,
//					@RequestParam(value = "point", required = false, defaultValue = "0") int point,
//					@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
//					HttpServletResponse res, Model model) throws IllegalStateException,
//					IOException {
//
//				Map<String, Object> map = new HashMap<String, Object>();
//				boolean result = true;
//				String message = "";
//				
//				try {
//					if (chargeSeq == 0) {
//						PointCharge pointCharge = new PointCharge();
//						pointCharge.setChargeMoney(chargeMoney);
//						pointCharge.setChargePoint(chargePoint);
//						pointCharge.setPoint(point);
//						pointCharge.setComment(comment);
//						pointChargeDao.addPointCharge(pointCharge);
////						pointSeq = pointDao.getLastSeq();
//						result = true;
//						message = "등록되었습니다.";
//						
//					} else {
//						PointCharge pointCharge = pointChargeDao.getPointCharge(chargeSeq);
//						pointCharge.setChargeMoney(chargeMoney);
//						pointCharge.setChargePoint(chargePoint);
//						pointCharge.setPoint(point);
//						pointCharge.setComment(comment);
//						pointChargeDao.updatePointCharge(pointCharge);
//						result = true;
//						message = "수정되었습니다.";
//					}
//				} catch (Exception e) {
//					message = e.getMessage();
//				}
//				 map.put("chargeSeq", chargeSeq);
//				 map.put("result", result);
//				 map.put("message", message);
//				
//				JSONObject jsonObject = JSONObject.fromObject(map);
//				Response.responseWrite(res, jsonObject);
//				return null;
//			}
//		
//	
//	
//
//	// 회원 관리 > 포인트/money 전환 설정
//	@RequestMapping("/admin/user/set_point_money.go")
//	public String moneyController(
//			HttpSession session, Model model) {
//
//		return "/admin/user/set_point_money";
//	}
//
//	// 회원 관리 > 포인트/money 전환 설정 리스트
//	@RequestMapping("/admin/user/money_list.go")
//	public String moneyListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			HttpSession session, Model model) {
//
//		// List<Company> list = null;
//		int count = 0;
//		//
//		// if (keyword.equals("")) {
//		// list = companyDao.getCompanyList(page, ITEM_COUNT_PER_PAGE);
//		// count = companyDao.getCount();
//		// } else {
//		// list = companyDao.getCompanyList(category1, category2, keyword, page,
//		// ITEM_COUNT_PER_PAGE);
//		// count = companyDao.getCount(category1, category2, keyword);
//		// }
//		//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
//				PAGE_COUNT_PER_PAGING);
//
//		// model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("currentPage", page);
//		return "admin/user/money_list";
//	}
//
//	// 회원 관리 > 레벨 정책 설정
//	@RequestMapping("/admin/user/set_level.go")
//	public String levelController(
//			HttpSession session, Model model) {
//
//		return "/admin/user/set_level";
//	}
//
//	// 회원 관리 > 레벨 정책 설정 리스트
//	@RequestMapping("/admin/user/level_list.go")
//	public String levelListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			HttpSession session, Model model) {
//
//		List<Level> list = null;
//		int count = 0;
//		
//		list = levelDao.getLevelList(page, ITEM_COUNT_PER_PAGE);
//		count = levelDao.getCount();
//		
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
//				PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("currentPage", page);
//		return "admin/user/level_list";
//	}
//	
//	
//	// 레벨 정책 설정 등록, 수정 처리
//	@RequestMapping("/admin/user/level_edit_do.go")
//	public String levelEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "levelSeq", required = false, defaultValue = "0") int levelSeq,
//			@RequestParam(value = "level", required = false, defaultValue = "0") int level,
//			@RequestParam(value = "minEx", required = false, defaultValue = "0") int minEx,
//			@RequestParam(value = "maxEx", required = false, defaultValue = "0") int maxEx,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//		
//		try {
//			if (levelSeq == 0) {
//				Level levelinput = new Level();
//				levelinput.setLevel(level);
//				levelinput.setMinEx(minEx);
//				levelinput.setMaxEx(maxEx);
//				levelDao.addLevel(levelinput);
////				pointSeq = pointDao.getLastSeq();
//				result = true;
//				message = "등록되었습니다.";
//				
//			} else {
//				Level levelinput = levelDao.getLevel(levelSeq);
//				levelinput.setLevel(level);
//				levelinput.setMinEx(minEx);
//				levelinput.setMaxEx(maxEx);
//				levelDao.updateLevel(levelinput);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		 map.put("levelSeq", levelSeq);
//		 map.put("result", result);
//		 map.put("message", message);
//		
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//	
//
//	// 토크 관리 > 토크목록
//	@RequestMapping("/admin/talk/talk.go")
//	public String talkController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "category1", required = false, defaultValue = "0") int category1,
//			@RequestParam(value = "category2", required = false, defaultValue = "0") int category2,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//
//			HttpSession session, Model model) {
//
//		List location = areaDao.getSidoList();
//
//		model.addAttribute("location", location);
//		
//		return "/admin/talk/talk";
//	}
//
//	// 토크 관리 > 토크목록 리스트
//	@RequestMapping("/admin/talk/talk_list.go")
//	public String talkListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
//			@RequestParam(value = "age", required = false, defaultValue = "0") int age,
//			@RequestParam(value = "areaSido", required = false, defaultValue = "") String areaSido,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			@RequestParam(value = "reportCount",required = false, defaultValue = "") boolean reportCount,
//			HttpSession session, Model model) {
//
//		List<Bbs> list = null;
//		int count = 0;
//
//		list = bbsDao.getBbsList(gender,age,keyword,areaSido,reportCount, page, ITEM_COUNT_PER_PAGE);
//		count = bbsDao.getCount(gender,age,keyword,areaSido,reportCount);
//		
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/talk/talk_list";
//	}
//	
//	
//	// 토크 신고 해체처리, 블라인드 처리 
//	@RequestMapping("/admin/talk/talk_edit_do.go")
//	public String talkEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "bbsSeq", required = false, defaultValue = "0") int bbsSeq,
//			@RequestParam(value = "reportCount", required = false, defaultValue = "0") int reportCount,
//			@RequestParam(value = "blindCount", required = false, defaultValue = "0") int blindCount,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//		
//		try {
//
//			Bbs bbs = bbsDao.getBbs(bbsSeq);
//			bbs.setReportCount(reportCount);
//			bbs.setBlindCount(blindCount);
//			bbsDao.updateBbs(bbs);
//			result = true;
//			message = "처리 되었습니다.";
//
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		 map.put("bbsSeq", bbsSeq);
//		 map.put("result", result);
//		 map.put("message", message);
//		
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//	
//	
//	
//	// 토크 상세보기
//	@RequestMapping("/admin/talk/talk_view.go")
//	public String talkViewController(
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "bbsSeq", required = false, defaultValue = "1") int bbsSeq,
//			HttpSession session, Model model) {
//
//		List<BbsComment> list = null;
//		int count = 0;
//		
//		Bbs bbs = null;
//
//		if (bbsSeq == 0) {
//			bbs = new Bbs();
//		} else {
//			bbs = bbsDao.getBbs(bbsSeq);
//		}
//		
//		list = bbsCommentDao.getBbsCommentList(bbsSeq, page,ITEM_COUNT_PER_PAGE);
//		count = bbsCommentDao.getCount(bbsSeq);
//
//		
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//		model.addAttribute("bbs", bbs);
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("currentPage", page);
//		return "admin/talk/talk_view";
//	}
//	
//	
//	// 토크 관리 > 앨범목록
//	@RequestMapping("/admin/album/album.go")
//	public String albumController(
//			HttpSession session, Model model) {
//		List location = areaDao.getSidoList();
//
//		model.addAttribute("location", location);
//		return "/admin/album/album";
//	}
//
//	// 토크 관리 > 앨범목록 리스트
//	@RequestMapping("/admin/album/album_list.go")
//	public String albumListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
//			@RequestParam(value = "age", required = false, defaultValue = "0") int age,
//			@RequestParam(value = "areaSido", required = false, defaultValue = "") String areaSido,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<BbsFiles> list = null;
//		int count = 0;
//		
//		list = bbsFilesDao.getBbsFilesList(gender,age,keyword,areaSido,page, ITEM_COUNT_PER_PAGE);
//		//count = bbsFilesDao.getAlbumCount(gender,age,keyword,areaSido);
//		
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		
//		return "admin/album/album_list";
//	}
//
//	
	// 공지사항
	@RequestMapping("/admin/notice/notice.go")
	public String noticeController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/notice/notice";
	}

	// 공지사항 리스트

	@RequestMapping("/admin/notice/notice_list.go")
	public String noticeListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

		if (keyword.equals("")) {

			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount();

		} else {

			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/notice/notice_list";
	}

	// 공지사항 등록/수정
	@RequestMapping("/admin/notice/notice_edit.go")
	public String noticeEditController(
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			Model model) {

		Notice notice = null;
		if (noticeSeq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(noticeSeq);
		}

		model.addAttribute("notice", notice);

		return "admin/notice/notice_edit";
	}

	// 공지사항 수정의 처리
	@RequestMapping("/admin/notice/notice_edit_do.go")
	public String noticeEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			if (noticeSeq == 0) {
				Notice notice = new Notice();
				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.addNotice(notice);
				noticeSeq = noticeDao.getLastSeq();

				result = true;
				message = "등록되었습니다.";
			} else {
				Notice notice = noticeDao.getNotice(noticeSeq);

				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.updateNotice(notice);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("noticeSeq", noticeSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 공지사항 삭제
	@RequestMapping("/admin/notice/notice_delete_do.go")
	public String noticeDeleteDoController(@RequestParam int noticeSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			noticeDao.deleteNotice(noticeSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	
	// 문진
	@RequestMapping("/admin/medical/medical.go")
	public String medicalController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/medical/medical";
	}

	// 문진 리스트

	@RequestMapping("/admin/medical/medical_list.go")
	public String medicalListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/medical/medical_list";
	}
	
	
	
	
	
	// 닥터톡 - 지표입력 < 혈당
	@RequestMapping("/admin/doctor_index_input/blood.go")
	public String bloodController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/blood";
	}

	// 닥터톡 - 지표입력 < 혈당 리스트

	@RequestMapping("/admin/doctor_index_input/blood_list.go")
	public String bloodListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/blood_list";
	}
	
	
	// 닥터톡 - 지표입력 < 혈압
	@RequestMapping("/admin/doctor_index_input/pressure.go")
	public String pressureController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/pressure";
	}

	// 닥터톡 - 지표입력 < 혈압 리스트

	@RequestMapping("/admin/doctor_index_input/pressure_list.go")
	public String pressureListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/pressure_list";
	}
	
	
	// 닥터톡 - 지표입력 < 콜레스테롤
	@RequestMapping("/admin/doctor_index_input/cholesterol.go")
	public String cholesterolController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/cholesterol";
	}

	// 닥터톡 - 지표입력 < 콜레스테롤 리스트

	@RequestMapping("/admin/doctor_index_input/cholesterol_list.go")
	public String cholesterolListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/cholesterol_list";
	}
	
	
	// 닥터톡 - 지표입력 < 체중,당화혈색소
	@RequestMapping("/admin/doctor_index_input/weight.go")
	public String weightController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/weight";
	}

	// 닥터톡 - 지표입력 < 체중,당화혈색소 리스트

	@RequestMapping("/admin/doctor_index_input/weight_list.go")
	public String weightListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/weight_list";
	}
	
	
	
	// 닥터톡 - 지표입력 < 비질환 대화관리
	@RequestMapping("/admin/doctor_index_input/splenopathy.go")
	public String splenopathyController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/splenopathy";
	}

	// 닥터톡 - 지표입력 < 비질환 대화관리

	@RequestMapping("/admin/doctor_index_input/splenopathy_list.go")
	public String splenopathyListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/splenopathy_list";
	}
	
	
	
	// 닥터톡 - 지표관리 < 혈당
	@RequestMapping("/admin/doctor_index_manage/blood.go")
	public String bloodManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/blood";
	}

	// 닥터톡 - 지표관리 < 혈당 리스트

	@RequestMapping("/admin/doctor_index_manage/blood_list.go")
	public String bloodManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/blood_list";
	}
	
	
	// 닥터톡 - 지표관리 < 혈압
	@RequestMapping("/admin/doctor_index_manage/pressure.go")
	public String pressureManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/pressure";
	}

	// 닥터톡 - 지표관리 < 혈압 리스트

	@RequestMapping("/admin/doctor_index_manage/pressure_list.go")
	public String pressureManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/pressure_list";
	}
	
	
	// 닥터톡 - 지표관리 < 콜레스테롤
	@RequestMapping("/admin/doctor_index_manage/cholesterol.go")
	public String cholesterolManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/cholesterol";
	}

	// 닥터톡 - 지표관리 < 콜레스테롤 리스트

	@RequestMapping("/admin/doctor_index_manage/cholesterol_list.go")
	public String cholesterolManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/cholesterol_list";
	}
	
	
	// 닥터톡 - 지표관리 < 체중,당화혈색소
	@RequestMapping("/admin/doctor_index_manage/weight.go")
	public String weightManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/weight";
	}

	// 닥터톡 - 지표관리 < 체중,당화혈색소 리스트

	@RequestMapping("/admin/doctor_index_manage/weight_list.go")
	public String weightManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/weight_list";
	}
	
	
	// 컨텐츠 관리 > 건강매거진
	@RequestMapping("/admin/contents/contents.go")
	public String contentsController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/contents/contents";
	}

	// 건강매거진 리스트

	@RequestMapping("/admin/contents/contents_list.go")
	public String contentsListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

		if (keyword.equals("")) {

			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount();

		} else {

			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/contents/contents_list";
	}

	// 건강매거진 등록/수정
	@RequestMapping("/admin/contents/contents_edit.go")
	public String contentsEditController(
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			Model model) {

		Notice notice = null;
		if (noticeSeq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(noticeSeq);
		}

		model.addAttribute("notice", notice);

		return "admin/contents/contents_edit";
	}

	// 건강매거진 수정의 처리
	@RequestMapping("/admin/contents/contents_edit_do.go")
	public String contentsEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			if (noticeSeq == 0) {
				Notice notice = new Notice();
				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.addNotice(notice);
				noticeSeq = noticeDao.getLastSeq();

				result = true;
				message = "등록되었습니다.";
			} else {
				Notice notice = noticeDao.getNotice(noticeSeq);

				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.updateNotice(notice);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("noticeSeq", noticeSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 건강매거진 삭제
	@RequestMapping("/admin/contents/contents_delete_do.go")
	public String contentsDeleteDoController(@RequestParam int noticeSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			noticeDao.deleteNotice(noticeSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	
	
//	// 팝업 공지
//	@RequestMapping("/admin/popup/popup.go")
//	public String popup(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/popup/popup";
//	}
//
//	// 팝업 공지 리스트
//	@RequestMapping("/admin/popup/popup_list.go")
//	public String popupListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			//@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Notice> list = null;
//		int count = 0;
//		int notiType = 10;
//
//		list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//		count = noticeDao.getNoticeMainCount();
//
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		//model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/popup/popup_list";
//	}
//
//	// // 팝업공지 등록/수정
//	@RequestMapping("/admin/popup/popup_edit.go")
//	public String popupEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Notice notice = null;
//		if (seq == 0) {
//			notice = new Notice();
//		} else {
//			notice = noticeDao.getNotice(seq);
//		}
//
//		model.addAttribute("notice", notice);
//
//		return "admin/popup/popup_edit";
//	}
//	
//	
//	
//	// 팝업광고 수정의 처리
//		@RequestMapping("/admin/popup/popup_edit_do.go")    
//		public String popupEditDoController(
//					HttpServletRequest req
//		        , HttpServletResponse res
//		        , Model model
//		        ) throws Exception {
//		 
//		    req.setCharacterEncoding("utf-8");
//		     
//		    int fileMaxBiteSize = FILE_MAX_SIZE * 1024 * 1024;
//		    File file = null;
//		     
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//		     
//		    try {
//		        //파일 업로드. 
//		        //폼에서 가져온 인자값을 얻기 위해 request 객체 전달, 업로드 경로, 파일 최대 크기, 한글처리, 파일 중복처리
//		        MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileMaxBiteSize, "UTF-8", new DefaultFileRenamePolicy());
//		         
//		        // 폼에서 입력한 값을 가져옴
//		        int seq    = Integer.parseInt(F.nullCheck(multi.getParameter("seq"),"0"));
//		        String linkUrl    = F.nullCheck(multi.getParameter("linkUrl"),"");
//		        String startDate    = F.nullCheck(multi.getParameter("startDate"),"");
//		        String endDate    = F.nullCheck(multi.getParameter("endDate"),"");
//		        String backgroundColor    = F.nullCheck(multi.getParameter("backgroundColor"),"");
//		        String sido    = F.nullCheck(multi.getParameter("areaSido"),"");
//		        String gugun   = F.nullCheck(multi.getParameter("areaGugun"),"");
//		        //int price    = Integer.parseInt(F.nullCheck(multi.getParameter("price"),"0"));
//		        String MAIN_IMG = "";
//		        String THUMB_IMG = "";
//		     
//		        // 업로드한 파일들을 Enumeration 타입으로 반환.
//		        // Enumeration형은 데이터를 뽑아올때 유용한 인터페이스
//		        Enumeration files = multi.getFileNames();
//		         
//		        String sName ="";
//		        
//		        while (files.hasMoreElements()) {
//		            String elementName = (String)files.nextElement();
//		             
//		             
//		            file = multi.getFile(elementName);
//		            int i = 0;
//		            if (file != null) {
//		                if (elementName.equals("imgFile")) {
//		                    String sPath = file.getParent() + "/";
//		                    sName = file.getName();
//		                }
//		            }            
//		        }
//		        
//		        boolean result = true;
//			    String message = "";
//		     
//				if (seq == 0) {
//					Notice notice= new Notice();
//					//notice.setLinkUrl(linkUrl);
//					//notice.setBackgroundColor(backgroundColor);
//					notice.setStartDate(startDate);
//					notice.setEndDate(endDate);
//					//notice.setSido(sido);
//					//notice.setGugun(gugun);
//					notice.setContentsHtml(sName);
//					noticeDao.addNotice(notice);
//					seq = noticeDao.getLastSeq();
//					result = true;
//					message = "등록되었습니다.";
//				
//				} else {
//				    Notice notice = noticeDao.getNotice(seq);
//			        if (sName.equals("") == false) {
//			        	notice.setContentsHtml(sName);
//			        }
//					//notice.setLinkUrl(linkUrl);
//					//notice.setBackgroundColor(backgroundColor);
//					notice.setStartDate(startDate);
//					notice.setEndDate(endDate);
//					//notice.setSido(sido);
//					//notice.setGugun(gugun);
//				    noticeDao.updateNotice(notice);   
//					result = true;
//					message = "수정되었습니다.";
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//
//		    //return "redirect:/admin/notice_manager.go";
//		    return "redirect:/admin/popup/popup.go";
//		}
//			
//		//팝업광고 이미지 삭제
//		@RequestMapping("/admin/popup/popup_file_delete_do.go")
//		public String popupFileDeleteDoController(
//		        @RequestParam(value="seq", required=false, defaultValue="0") int seq, 
//		        @RequestParam(value="imgFile", required=false, defaultValue="") String imgFile, 
//		        HttpServletResponse res
//		    ) {
//		    Map<String, Object> map = new HashMap<String, Object>();
//		    boolean result = true;
//		    String message = "";
//		 
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//
//		    File file = new File(FILE_LOCAL_PATH + imgFile);
//		    file.delete();
//		    
//		    Notice notice = noticeDao.getNotice(seq);
//		    notice.setContentsHtml("");
//		    noticeDao.updateNotice(notice);    
//		    
//		    map.put("result", result);
//		    map.put("message", message);
//		 
//		    JSONObject jsonObject = JSONObject.fromObject(map);
//		    Response.responseWrite(res, jsonObject);
//		    return null;
//		}
//		
//		//팝업광고 삭제
//		@RequestMapping("/admin/popup/popup_delete_do.go")
//		public String popupDeleteDoController(
//		        @RequestParam(value="seq", required=false, defaultValue="0") int seq, 
//		        @RequestParam(value="imgFile", required=false, defaultValue="") String imgFile, 
//		        HttpServletResponse res
//		    ) {
//		    Map<String, Object> map = new HashMap<String, Object>();
//		    boolean result = true;
//		    String message = "";
//		 
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//
//		    File file = new File(FILE_LOCAL_PATH + imgFile);
//		    file.delete();
//		    
//		    Notice notice = noticeDao.getNotice(seq);
//		    notice.setContentsHtml("");
//		    noticeDao.deleteNotice(seq); 
//		    
//	    	map.put("result", result);
//		    map.put("message", message);
//		 
//		    JSONObject jsonObject = JSONObject.fromObject(map);
//		    Response.responseWrite(res, jsonObject);
//		    return null;
//		}
//	
//	
//	
//	
//	// 업그레이드 공지사항
//	@RequestMapping("/admin/update/update.go")
//	public String update(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/update/update";
//	}
//
//	// 업그레이드 공지사항 리스트
//	@RequestMapping("/admin/update/update_list.go")
//	public String updateListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		 List<Notice> list = null;
//		int count = 0;
//		int notiType = 20;
//
//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/update/update_list";
//	}
//
//	// 업그레이드 등록/수정
//	@RequestMapping("/admin/update/update_edit.go")
//	public String updateEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Notice notice = null;
//		if (seq == 0) {
//			notice = new Notice();
//		} else {
//			notice = noticeDao.getNotice(seq);
//		}
//
//		model.addAttribute("notice", notice);
//
//		return "admin/update/update_edit";
//	}
//
//	// 업그레이드 수정의 처리
//	@RequestMapping("/admin/update/update_edit_do.go")
//	public String updateEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "linkUrl", required = false, defaultValue = "") String linkUrl,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Notice notice = new Notice();
//				notice.setUserId(userId);
//				notice.setTitle(title);
//				// notice.setStartDate(startDate);
//				// notice.setEndDate(endDate);
//				//notice.setNotiType(notiType);
//				notice.setSendPush(sendPush);
//				notice.setLinkUrl(linkUrl);
//				// notice.setSendPush(sendPush);
//				// notice.setContentsHtml(contentsHtml);
//				// notice.setContentsText(contentsText);
//				noticeDao.addNotice(notice);
//				seq = noticeDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Notice notice = noticeDao.getNotice(seq);
//
//				notice.setUserId(userId);
//				notice.setTitle(title);
//				// notice.setStartDate(startDate);
//				// notice.setEndDate(endDate);
//				//notice.setNotiType(notiType);
//				notice.setSendPush(sendPush);
//				notice.setLinkUrl(linkUrl);
//				// notice.setContentsHtml(contentsHtml);
//				// notice.setContentsText(contentsText);
//				noticeDao.updateNotice(notice);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 업그레이드 삭제
//	@RequestMapping("/admin/update/update_delete_do.go")
//	public String updateDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			noticeDao.deleteNotice(seq);
//
//			map.put("message", "업그레이드 공지가 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "업그레이드 공지가 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//
//	// 이벤트 관리
//	@RequestMapping("/admin/event/event.go")
//	public String eventController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/event/event";
//	}
//
//	// 이벤트 리스트
//
//	@RequestMapping("/admin/event/event_list.go")
//	public String eventListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Event> list = null;
//		int count = 0;
//		int notiType = 0;
//
//		if (keyword.equals("")) {
//
//			list = eventDao.getEventList(page, ITEM_COUNT_PER_PAGE);
//			count = eventDao.getCount();
//
//		} else {
//
//			list = eventDao.getEventList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = eventDao.getCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		 model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/event/event_list";
//	}
//
//	// 이벤트 관리 등록/수정
//	@RequestMapping("/admin/event/event_edit.go")
//	public String eventEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Event event = null;
//		if (seq == 0) {
//			event = new Event();
//		} else {
//			event = eventDao.getEvent(seq);
//		}
//
//		model.addAttribute("event", event);
//
//		return "admin/event/event_edit";
//	}
//
//	// 이벤트 관리 수정의 처리
//	@RequestMapping("/admin/event/event_edit_do.go")
//	public String eventEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
//			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Event event = new Event();
//				event.setUserId(userId);
//				event.setTitle(title);
//				event.setStartDate(startDate);
//				event.setEndDate(endDate);
//				//event.setNotiType(notiType);
//				event.setSendPush(sendPush);
//				event.setContentsHtml(contentsHtml);
//				event.setContentsText(contentsText);
//				eventDao.addEvent(event);
//				seq = eventDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Event event = eventDao.getEvent(seq);
//
//				event.setUserId(userId);
//				event.setTitle(title);
//				event.setStartDate(startDate);
//				event.setEndDate(endDate);
//				//event.setNotiType(notiType);
//				event.setSendPush(sendPush);
//				event.setContentsHtml(contentsHtml);
//				event.setContentsText(contentsText);
//				eventDao.updateEvent(event);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 이벤트 관리 삭제
//	@RequestMapping("/admin/event/event_delete_do.go")
//	public String eventDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			eventDao.deleteEvent(seq);
//
//			map.put("message", "이벤트가 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "이벤트가 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//	// 1:1문의 관리
//	@RequestMapping("/admin/inquiry/inquiry.go")
//	public String inquiryController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/inquiry/inquiry";
//	}
//
//	// 1:1문의 관리 리스트
//
//	@RequestMapping("/admin/inquiry/inquiry_list.go")
//	public String inquiryListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Qna> list = null;
//		int count = 0;
//
//		if (keyword.equals("")) {
//			list = qnaDao.getQnaList(page, ITEM_COUNT_PER_PAGE);
//			count = qnaDao.getCount();
//		} else {
//			list = qnaDao.getQnaList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = qnaDao.getCount(keyword);
//		}
//
//		// 페이징
//		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/inquiry/inquiry_list";
//	}
//
//	// 1:1문의 관리 등록/수정
//	@RequestMapping("/admin/inquiry/inquiry_edit.go")
//	public String inquiryEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Qna qna = null;
//		if (seq == 0) {
//			qna = new Qna();
//		} else {
//			qna = qnaDao.getQna(seq);
//		}
//
//		model.addAttribute("qna", qna);
//
//		return "admin/inquiry/inquiry_edit";
//	}
//
//	// 1:1문의 수정의 처리
//	@RequestMapping("/admin/inquiry/inquiry_edit_do.go")
//	public String inquiryEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
//			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Qna qna = new Qna();
//				qna.setUserId(userId);
//				qna.setTitle(title);
//				qna.setStartDate(startDate);
//				qna.setEndDate(endDate);
//				//qna.setNotiType(notiType);
//				qna.setSendPush(sendPush);
//				qna.setContentsHtml(contentsHtml);
//				qna.setContentsText(contentsText);
//				qnaDao.addQna(qna);
//				seq = qnaDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Qna qna = qnaDao.getQna(seq);
//
//				qna.setUserId(userId);
//				qna.setTitle(title);
//				qna.setStartDate(startDate);
//				qna.setEndDate(endDate);
//				//qna.setNotiType(notiType);
//				qna.setSendPush(sendPush);
//				qna.setContentsHtml(contentsHtml);
//				qna.setContentsText(contentsText);
//				qnaDao.updateQna(qna);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 1:1문의 관리 삭제
//	@RequestMapping("/admin/inquiry/inquiry_delete_do.go")
//	public String inquiryDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			qnaDao.deleteQna(seq);
//
//			map.put("message", "게시물이 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//	// FAQ관리
//	@RequestMapping("/admin/faq/faq.go")
//	public String faqController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/faq/faq";
//	}
//
//	// FAQ관리 리스트
//
//	@RequestMapping("/admin/faq/faq_list.go")
//	public String faqListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		 List<Faq> list = null;
//		int count = 0;
//		int notiType = 0;
//
//		if (keyword.equals("")) {
//
//			list = faqDao.getFaqList(page, ITEM_COUNT_PER_PAGE);
//			count = faqDao.getCount();
//
//		} else {
//
//			list = faqDao.getFaqList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = faqDao.getCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/faq/faq_list";
//	}
//
//	// FAQ관리 등록/수정
//	@RequestMapping("/admin/faq/faq_edit.go")
//	public String faqEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Faq faq = null;
//		if (seq == 0) {
//			faq = new Faq();
//		} else {
//			faq = faqDao.getFaq(seq);
//		}
//
//		model.addAttribute("faq", faq);
//
//		return "admin/faq/faq_edit";
//	}
//
//	// FAQ관리 수정의 처리
//	@RequestMapping("/admin/faq/faq_edit_do.go")
//	public String faqEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Faq faq = new Faq();
//				faq.setUserId(userId);
//				faq.setTitle(title);
//				//faq.setNotiType(notiType);
//				faq.setContentsHtml(contentsHtml);
//				faq.setContentsText(contentsText);
//				faqDao.addFaq(faq);
//				seq = faqDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Faq faq = faqDao.getFaq(seq);
//
//				faq.setUserId(userId);
//				faq.setTitle(title);
//				//faq.setNotiType(notiType);
//				faq.setContentsHtml(contentsHtml);
//				faq.setContentsText(contentsText);
//				faqDao.updateFaq(faq);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// FAQ관리 관리 삭제
//	@RequestMapping("/admin/faq/faq_delete_do.go")
//	public String faqDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			faqDao.deleteFaq(seq);
//
//			map.put("message", "게시물이 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}


}
*/