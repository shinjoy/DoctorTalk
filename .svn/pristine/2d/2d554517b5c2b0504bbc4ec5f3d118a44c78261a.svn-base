package kr.nomad.mars;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.nomad.mars.dao.PushDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.Push;
import kr.nomad.mars.dto.User;
import kr.nomad.util.T;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class SchedulerController {

	@Autowired UserDao userdao;
	@Autowired PushDao pushDao;

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	//@Scheduled(fixedDelay = 10000) // 5초마다 실행한다.
	@Scheduled(cron = "1 * * * * ?") // 매분마다 실행한다. 초 분 시 일 월 주(년)
	public void eatMedicineScheduler() {
		
		// 매 분마다(매분 1초) 복약 알림 푸시를 발송한다.

		String time = T.getNowFomat2();
		String week = T.getWeekday();
		
		logger.info("time "+ time);
		logger.info("week "+ week);
		
		time = time.replace("오전", "AM").replace("오후", "PM");
		
		List list = userdao.getUserListEatMedicine(time, week);
		String message = "복약하실 시간입니다.";
		
		for (int i=0; i<list.size(); i++) {
			User user = (User) list.get(i);
			
			if (user.getPushkey().equals("") == false) {

				Push push = new Push();
				push.setBadge(1);
				push.setOs(user.getOsType());
				push.setPushKey(user.getPushkey());
				push.setMsgType(Push.MSG_TYPE_EAT_MED);
				push.setUserid(user.getUserId());
				push.setStatus(0);
				push.setServiceId("RECOVER");
				push.setPushType(1);							
				push.setMsg(message);
				push.setMsgKey("0");
				pushDao.addPush(push);
			}
			
		}

	}


	//@Scheduled(fixedDelay = 10000) // 5초마다 실행한다.
	@Scheduled(cron = "1 * * * * ?") // 매분마다 실행한다. 초 분 시 일 월 주(년)
	public void noCheckedScheduler() {
		
		// 오후 1시에 기간내 미입력 대상자에게 푸시 발송
		
		/*
		User
		//친구 요청 로그 기록
		map.put("result", true);
		map.put("message", "친구 요청되었습니다.");
		if (friendUser.getPushkey().equals("") == false) {

			Push push = new Push();
			push.setBadge(1);
			push.setOs(friendUser.getOsType());
			push.setPushKey(friendUser.getPushkey());
			push.setMsgType(Push.MSG_TYPE_REQUEST_FRIEND);
			push.setUserid(userId);
			push.setStatus(0);
			push.setServiceId("FACETALK");
			push.setPushType(1);							
			push.setMsg(message);
			push.setMsgKey(String.valueOf(seq));
			pushDao.addPush(push);
		}
		*/
		
	}

	

	//@Scheduled(fixedDelay = 10000) // 5초마다 실행한다.
	@Scheduled(cron = "1 * * * * ?") // 매분마다 실행한다. 초 분 시 일 월 주(년)
	public void noCvScheduler() {
		
		// 오전 10시에 가입한지 1일, 1년 된 사용자에게 CV-Risk 알림 발송
		
		/*
		User
		//친구 요청 로그 기록
		map.put("result", true);
		map.put("message", "친구 요청되었습니다.");
		if (friendUser.getPushkey().equals("") == false) {

			Push push = new Push();
			push.setBadge(1);
			push.setOs(friendUser.getOsType());
			push.setPushKey(friendUser.getPushkey());
			push.setMsgType(Push.MSG_TYPE_REQUEST_FRIEND);
			push.setUserid(userId);
			push.setStatus(0);
			push.setServiceId("FACETALK");
			push.setPushType(1);							
			push.setMsg(message);
			push.setMsgKey(String.valueOf(seq));
			pushDao.addPush(push);
		}
		*/
		
	}

	

	//@Scheduled(fixedDelay = 10000) // 5초마다 실행한다.
	@Scheduled(cron = "1 * * * * ?") // 매분마다 실행한다. 초 분 시 일 월 주(년)
	public void noPeriodScheduler() {
		
		// 오후 3시에 관리주기 변경 대상자에게 알림
		
		/*
		User
		//친구 요청 로그 기록
		map.put("result", true);
		map.put("message", "친구 요청되었습니다.");
		if (friendUser.getPushkey().equals("") == false) {

			Push push = new Push();
			push.setBadge(1);
			push.setOs(friendUser.getOsType());
			push.setPushKey(friendUser.getPushkey());
			push.setMsgType(Push.MSG_TYPE_REQUEST_FRIEND);
			push.setUserid(userId);
			push.setStatus(0);
			push.setServiceId("FACETALK");
			push.setPushType(1);							
			push.setMsg(message);
			push.setMsgKey(String.valueOf(seq));
			pushDao.addPush(push);
		}
		*/
		
	}

}
