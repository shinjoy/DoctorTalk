package kr.nomad.mars;

import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.nomad.mars.dao.CvriskDao;
import kr.nomad.mars.dao.DayDao;
import kr.nomad.mars.dao.DoctorPointerDao;
import kr.nomad.mars.dao.MagazineDao;
import kr.nomad.mars.dao.MagazinePageDao;
import kr.nomad.mars.dao.MedExamDao;
import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.QnaDao;
import kr.nomad.mars.dao.UBasicDao;
import kr.nomad.mars.dao.UColDao;
import kr.nomad.mars.dao.UHbDao;
import kr.nomad.mars.dao.UMediDao;
import kr.nomad.mars.dao.UPressDao;
import kr.nomad.mars.dao.UWeightDao;
import kr.nomad.mars.dao.UbloodDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dao.WeekDao;
import kr.nomad.mars.dto.Cvrisk;
import kr.nomad.mars.dto.Day;
import kr.nomad.mars.dto.DoctorPointer;
import kr.nomad.mars.dto.Magazine;
import kr.nomad.mars.dto.MagazinePage;
import kr.nomad.mars.dto.MedExam;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.Qna;
import kr.nomad.mars.dto.User;
import kr.nomad.mars.dto.UserBasic;
import kr.nomad.mars.dto.UserBlood;
import kr.nomad.mars.dto.UserCol;
import kr.nomad.mars.dto.UserMedi;
import kr.nomad.mars.dto.UserPress;
import kr.nomad.mars.dto.UserWeight;
import kr.nomad.mars.dto.Userhb;
import kr.nomad.mars.dto.Week;
import kr.nomad.util.F;
import kr.nomad.util.FileWrite;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.Paging;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import kr.nomad.util.XlsxWriter;
import kr.nomad.util.file.UniqFileRenamePolicy;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.oreilly.servlet.MultipartRequest;

@Controller
public class AdminController {
	
	@Autowired
	NoticeDao noticeDao;
	
	@Autowired
	UserDao userDao;
	
	@Autowired
	MedExamDao medExamDao;
	
	@Autowired
	DoctorPointerDao doctorPointerDao;
	
	@Autowired
	QnaDao qnaDao;
	
	@Autowired
	UBasicDao uBasicDao;
	
	@Autowired
	UMediDao uMediDao;
	
	@Autowired
	UbloodDao ubloodDao;
	
	@Autowired
	UPressDao uPressDao;
	
	@Autowired
	UWeightDao 	uWeightDao;
	
	@Autowired
	UColDao uColDao;
	
	@Autowired
	UHbDao 	uHbDao; 
	
	@Autowired
	CvriskDao cvriskDao;
	
	@Autowired MagazineDao magazineDao;
	@Autowired MagazinePageDao magazinepageDao;
	
	@Autowired DayDao daydao;
	@Autowired WeekDao weekdao;
	
	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;

	// 관리자 메인
	@RequestMapping("/admin/main.go")
	public String adminMainController(HttpSession session, Model model) {

		int topCount = 8;

		// List<Notice> noticeList = noticeDao.getNoticeTopList(topCount);
		// List<Faq> faqList = faqDao.getFaqTopList(topCount);
		// List<Analysis> anaList = analysisDao.getAnalysisTopList(topCount);
		//
		// model.addAttribute("noticeList", noticeList);
		// model.addAttribute("faqList", faqList);
		// model.addAttribute("anaList", anaList);
		return "/admin/main";
	}
	
	
	// 회원 관리 > 일반회원
	@RequestMapping("/admin/user/user.go")
	public String userController(HttpSession session, Model model) {
	
		
		return "/admin/user/user";
	}


	// 회원 관리 > 상담원
	@RequestMapping("/admin/user/admin.go")
	public String userAdminController(HttpSession session, Model model) {
	
		
		return "/admin/user/admin";
	}
	
	// 회원 관리 > 일반회원 리스트
	@RequestMapping("/admin/user/user_list.go")
	public String userListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
			@RequestParam(value = "age", required = false, defaultValue = "0") int age,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<User> list = null;
		int count = 0;

		list = userDao.getUserList(keyword,gender,age,page, ITEM_COUNT_PER_PAGE);
		count = userDao.getCount(keyword,gender,age);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/user/user_list";
	}
	
	
	//일반회원 엑셀 다운로드
	@RequestMapping("/admin/user/use_list_excel.go")
	public ModelAndView productdListExcelController(Model model) {

		List list = userDao.getUser();
		
		SimpleDateFormat formatdate = new SimpleDateFormat("yyyyMMddHHmmss");
		String fileName = "code_" + formatdate.format(new Date());
		XlsxWriter writer = new XlsxWriter(FILE_ROOT + "/files/excel/"+ fileName + ".xls");

		List title = new ArrayList();
		List contents = new ArrayList();

		title.add("이름");
		title.add("아이디");
		title.add("생년월일");
		title.add("질환");
		title.add("최근진단등록");
		title.add("가입일");

		for (int i = 0; i < list.size(); i++) {
			User user = (User) list.get(i);

			List dataList = new ArrayList();
			dataList.add(user.getUserName());
			dataList.add(user.getUserId());
			dataList.add(user.getBirthday());
			dataList.add("");
			dataList.add("");
			dataList.add(user.getRegDate());

			contents.add(dataList);
		}

		writer.writeFile(title, contents);
		
		File file = new File(FILE_ROOT + "/files/excel/" + fileName + ".xls");

		return new ModelAndView("fileDownloadView", "file", file);
	}
	
	
	

	// 일반회원 혈당 상세보기
	@RequestMapping("/admin/user/user_view.go")
	public String userViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

		int count = 0;

		User user;
		UserBasic userBasic = null;
		UserMedi userMedi = null;

		String today = T.getToday(); // 오늘 날짜
		String before =""; // 기간세팅
		before=T.getDateAdd(today, -30);

		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
			userBasic = uBasicDao.getUserBasicView(userId);
			userMedi = uMediDao.getUserMediView(userId);
		}
		
		// 해당 유저 혈당 리스트
		List<UserBlood> UserBloodlist = ubloodDao.getUserBlood(userId);
		count = ubloodDao.getCount(userId);
		
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		
		
		model.addAttribute("gongavg",ubloodDao.getUserBloodavg(userId,today, before, 1)); //공복월평균
		model.addAttribute("eatavg", ubloodDao.getUserBloodavg(userId,today, before, 2));	//식후 월 평균
		model.addAttribute("sleepavg",ubloodDao.getUserBloodavg(userId,today, before, 3));	// 취침전 월 평균
		model.addAttribute("UserBloodlist", UserBloodlist);
		model.addAttribute("user", user);
		model.addAttribute("userBasic", userBasic);
		model.addAttribute("userMedi", userMedi);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view";
	}
	
	
	
	// 일반회원 혈압 상세보기
	@RequestMapping("/admin/user/user_view_pressure.go")
	public String userPressureViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

		int count = 0;
		
		User user; 
		UserBasic userBasic = null;
		UserMedi userMedi = null;
		
		String today = T.getToday(); // 오늘 날짜
		String before =""; // 기간세팅
		before=T.getDateAdd(today, -30);
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
			userBasic = uBasicDao.getUserBasicView(userId);
			userMedi = uMediDao.getUserMediView(userId);
		}
		
		// 해당 유저 혈압 리스트 
		List<UserPress> UserPresslist = uPressDao.getUserPress(userId);
		count = uPressDao.getCount(userId);
		

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		
		model.addAttribute("dpress", uPressDao.getUserPressavg(userId,today, before, "dplessure")); //이완기
		model.addAttribute("spress", uPressDao.getUserPressavg(userId,today, before, "dplessure")); //수축기
		model.addAttribute("UserPresslist", UserPresslist);
		model.addAttribute("user", user);
		model.addAttribute("userBasic", userBasic);
		model.addAttribute("userMedi", userMedi);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_pressure";
	}
	
	// 일반회원 체중 상세보기
	@RequestMapping("/admin/user/user_view_weight.go")
	public String userWeightViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

		int count = 0;
		
		User user; 
		UserBasic userBasic = null;
		UserMedi userMedi = null;
		
		String today = T.getToday(); // 오늘 날짜
		String before =""; // 기간세팅
		before=T.getDateAdd(today, -30);
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
			userBasic = uBasicDao.getUserBasicView(userId);
			userMedi = uMediDao.getUserMediView(userId);
		}
		
		
		// 해당 유저 체중 리스트 
		List<UserWeight> UserWeightlist = uWeightDao.getUserWeight(userId);
		count = uWeightDao.getCount(userId);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		
		model.addAttribute("weightavg", uWeightDao.getUseravg(userId, today, before)); //체중 월평균
		model.addAttribute("bmiavg", uWeightDao.getUserWeighavg(userId, today, before)); // BMI 월평균
		model.addAttribute("UserWeightlist", UserWeightlist);
		model.addAttribute("user", user);
		model.addAttribute("userBasic", userBasic);
		model.addAttribute("userMedi", userMedi);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_weight";
	}
	

	
	// 일반회원 콜레스테롤 상세보기
	@RequestMapping("/admin/user/user_view_cholesterol.go")
	public String userCholesterolViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

		int count = 0;
		
		User user; 
		UserBasic userBasic = null;
		UserMedi userMedi = null;
		
		String today = T.getToday(); // 오늘 날짜
		String before =""; // 기간세팅
		before=T.getDateAdd(today, -30);
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
			userBasic = uBasicDao.getUserBasicView(userId);
			userMedi = uMediDao.getUserMediView(userId);
		}
		
		// 해당유저 콜레스테롤 리스트
		List<UserCol> UserCollist = uColDao.getUserCol(userId);
		count = uColDao.getUserColcnt(userId);
		
		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		
		// 해당유저 콜레스테롤 최근값 하나만 가지고 오기
		UserCol userCol = uColDao.UserCol(userId);
		
		model.addAttribute("userCol", userCol);
		model.addAttribute("UserCollist", UserCollist);
		model.addAttribute("user", user);
		model.addAttribute("userBasic", userBasic);
		model.addAttribute("userMedi", userMedi);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_cholesterol";
	}
	
	
	// 일반회원 당화혈색소 상세보기
	@RequestMapping("/admin/user/user_view_hemoglobin.go")
	public String userHemoglobinViewController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {

		int count = 0;
		
		User user; 
		UserBasic userBasic = null;
		UserMedi userMedi = null;
		
		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
			userBasic = uBasicDao.getUserBasicView(userId);
			userMedi = uMediDao.getUserMediView(userId);
		}
		
		// 해당유저 당화혈색소 리스트
		List<Userhb> Userhblist = uHbDao.getUserhb(userId);
		count = uHbDao.getUserHbacnt(userId);
		
		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		// 해당유저 당화혈색소 최근값 하나만 가지고 오기
		Userhb userhb = uHbDao.getUserhbRecent(userId);
		
		model.addAttribute("userhb", userhb);
		model.addAttribute("Userhblist", Userhblist);
		model.addAttribute("user", user);
		model.addAttribute("userBasic", userBasic);
		model.addAttribute("userMedi", userMedi);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "admin/user/user_view_hemoglobin";
	}
	

	// 일반회원 수정 삭제
	@RequestMapping("/admin/user/user_edit.go")
	public String userListController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {


		User user = null;

		if (userId.equals("")) {
			user = new User();
		} else {
			user = userDao.getUsers(userId);
		}
		
		model.addAttribute("user", user);
		return "/admin/user/user_edit";
	}

	// 일반회원 등록 수정 처리
	@RequestMapping("/admin/user/user_edit_do.go")
	public String userEditDoController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			
			User user = userDao.getUsers(userId);
			userDao.updateUser(user);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		
		map.put("result", result);
		map.put("message", message);

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 일반회원 삭제
	@RequestMapping("/admin/user/user_delete_do.go")
	public String companyDeleteDoController(			
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		

		try {
			// 일반회원 삭제
			userDao.deleteUser(userId);

			map.put("message", "사용자가 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "사용자가 삭제되지 않았습니다.\n"+e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		

		return null;
	}
	// 공지사항
	@RequestMapping("/admin/notice/notice.go")
	public String noticeController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/notice/notice";
	}

	// 공지사항 리스트

	@RequestMapping("/admin/notice/notice_list.go")
	public String noticeListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

		if (keyword.equals("")) {

			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount();

		} else {

			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/notice/notice_list";
	}

	// 공지사항 등록/수정
	@RequestMapping("/admin/notice/notice_edit.go")
	public String noticeEditController(
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			Model model) {

		Notice notice = null;
		if (noticeSeq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(noticeSeq);
		}

		model.addAttribute("notice", notice);

		return "admin/notice/notice_edit";
	}

	// 공지사항 수정의 처리
	@RequestMapping("/admin/notice/notice_edit_do.go")
	public String noticeEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			if (noticeSeq == 0) {
				Notice notice = new Notice();
				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.addNotice(notice);
				noticeSeq = noticeDao.getLastSeq();

				result = true;
				message = "등록되었습니다.";
			} else {
				Notice notice = noticeDao.getNotice(noticeSeq);

				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				//notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.updateNotice(notice);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("noticeSeq", noticeSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 공지사항 삭제
	@RequestMapping("/admin/notice/notice_delete_do.go")
	public String noticeDeleteDoController(@RequestParam int noticeSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			noticeDao.deleteNotice(noticeSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	
	
	// 도움말
	@RequestMapping("/admin/notice/faq.go")
	public String faqController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/notice/faq";
	}

	// 도움말 리스트

	@RequestMapping("/admin/notice/faq_list.go")
	public String faqListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Qna> list = null;
		int count = 0;

		if (keyword.equals("")) {

			list = qnaDao.getQnaList(page, ITEM_COUNT_PER_PAGE);
			count = qnaDao.getCount();

		} else {

			list = qnaDao.getQnaList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = qnaDao.getCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/notice/faq_list";
	}

	// 공지사항 등록/수정
	@RequestMapping("/admin/notice/faq_edit.go")
	public String faqEditController(
			@RequestParam(value = "qnaSeq", required = false, defaultValue = "0") int qnaSeq,
			Model model) {

		Qna qna = null;
		if (qnaSeq == 0) {
			qna = new Qna();
		} else {
			qna = qnaDao.getQna(qnaSeq);
		}

		model.addAttribute("qna", qna);

		return "admin/notice/faq_edit";
	}

	// 공지사항 수정의 처리
	@RequestMapping("/admin/notice/faq_edit_do.go")
	public String faqEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "qnaSeq", required = false, defaultValue = "0") int qnaSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
//			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
			@RequestParam(value = "cateKind", required = false, defaultValue = "0") int cateKind,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			if (qnaSeq == 0) {
				Qna qna = new Qna();
				qna.setUserId(userId);
				qna.setTitle(title);
				qna.setCateKind(cateKind);
				qna.setContentsHtml(contentsHtml);
				qna.setContentsText(contentsText);
				qnaDao.addQna(qna);

				result = true;
				message = "등록되었습니다.";
			} else {
				Qna qna = qnaDao.getQna(qnaSeq);
				qna.setUserId(userId);
				qna.setTitle(title);
				qna.setCateKind(cateKind);
				qna.setContentsHtml(contentsHtml);
				qna.setContentsText(contentsText);
				qnaDao.updateQna(qna);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("qnaSeq", qnaSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 공지사항 삭제
	@RequestMapping("/admin/notice/faq_delete_do.go")
	public String faqDeleteDoController(@RequestParam int qnaSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			qnaDao.deleteQna(qnaSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	
	

	
	// 문진
	@RequestMapping("/admin/medical/medical.go")
	public String medicalController(
			HttpSession session, Model model) {

		return "/admin/medical/medical";
	}

	// 문진 리스트

	@RequestMapping("/admin/medical/medical_list.go")
	public String medicalListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model) {
		
		
		List<MedExam> list = null;
		int count = 0;
		list = medExamDao.getMedExamList();
		/*list = medExamDao.getMedExamList(page, ITEM_COUNT_PER_PAGE);
		count = medExamDao.getCount();*/

		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		
		return "admin/medical/medical_list";
	}
	
	
	// 문진 등록/수정
	@RequestMapping("/admin/medical/medical_edit.go")
	public String medicalEditController(
			@RequestParam(value = "medSeq", required = false, defaultValue = "0") int medSeq,
			Model model) {

		MedExam medExam = null;
		if (medSeq == 0) {
			medExam = new MedExam();
		} else {
			medExam = medExamDao.getMedExam(medSeq);
		}

		model.addAttribute("medExam", medExam);

		return "admin/medical/medical_edit";
	}

	// 문진 수정의 처리
	@RequestMapping("/admin/medical/medical_edit_do.go")
	public String medicalEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "medSeq", required = false, defaultValue = "0") int medSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
			@RequestParam(value = "value", required = false, defaultValue = "0") int value,
			@RequestParam(value = "move", required = false, defaultValue = "0") int move,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			if (medSeq == 0) {
				
				MedExam medExam = new MedExam();
				medExam.setAskind(askind);
				medExam.setComment(comment);
				//medExam.setValue(value);
				medExam.setMove(move);
				medExamDao.addMedExam(medExam);		
				result = true;
				message = "등록되었습니다.";
				
			} 
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	// 문진 삭제
	@RequestMapping("/admin/medical/medical_delete_do.go")
	public String medicalDeleteDoController(@RequestParam int medSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 문진 삭제
			medExamDao.deleteMedExam(medSeq);

			map.put("message", "삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	// 문진 수정의 처리
	@RequestMapping("/admin/medical/medical_edit_table_do.go")
	public String medicalTableEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "medSeq", required = false, defaultValue = "0") int medSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			MedExam medExam = medExamDao.getMedExam(medSeq);
			medExam.setComment(comment);
			medExamDao.updateMedExam(comment,medSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 문진 sort 값 변경처리
	@RequestMapping("/admin/medical/sort_edit_do.go")
	public String sortEditController(
			@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			int sortCount = sortList.length;

			// logContents 리스트 갯수만큼 로그 저장
			
			if(sortList != null || !(sortList.equals("")) ){
				
				for (int i = 0; i <sortCount; i++) {
	
					int mSeq = Integer.parseInt(sortList[i]);
					
					//MedExam medExam = medExamDao.getMedExam(sort);
					//medExam.setSort(i+1);
					medExamDao.updateMedExam(i+1, mSeq);
					result = true;
					message = "수정되었습니다.";
				}
			
			}
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	
	// 문진 마지막 질문 값 처리
	@RequestMapping("/admin/medical/medical_checkQuest_do.go")
	public String checkQuestEditController(
			@RequestParam(value = "medSeq", required = false, defaultValue = "") int medSeq,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {

			medExamDao.updateMedExamIsLast(1,medSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	
	
	// 닥터톡 - 지표입력 < 혈당
	@RequestMapping("/admin/doctor_index_input/blood.go")
	public String bloodController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/blood";
	}

	// 닥터톡 - 지표입력 < 혈당 리스트

	@RequestMapping("/admin/doctor_index_input/blood_list.go")
	public String bloodListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<DoctorPointer> list = null;
		int count = 0;

		list = doctorPointerDao.getBloodList(page, ITEM_COUNT_PER_PAGE);
		count = doctorPointerDao.getBloodCount();


		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		
		return "admin/doctor_index_input/blood_list";
	}
	
	
	// 지표입력 혈당 등록/수정
	@RequestMapping("/admin/doctor_index_input/blood_edit.go")
	public String bloodEditController(
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			Model model) {

		DoctorPointer doctorPointer = null;
		
		if (comSeq == 0) {
			doctorPointer = new DoctorPointer();
		} else {
			doctorPointer = doctorPointerDao.getDoctorPointer(comSeq);
		}

		model.addAttribute("doctorPointer", doctorPointer);

		return "/admin/doctor_index_input/blood_edit";
	}

	// 지표입력 혈당 등록의 처리
	@RequestMapping("/admin/doctor_index_input/blood_edit_do.go")
	public String bloodEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
			@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
//			@RequestParam(value = "move", required = false, defaultValue = "0") int move,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			if (comSeq == 0) {
				
				DoctorPointer doctorPointer = new DoctorPointer();
				doctorPointer.setDiseaseId("blood");
				doctorPointer.setAskind(askind);
				doctorPointer.setComment(comment);
				doctorPointer.setAnsType(ansType);
				//doctorPointer.setMove(move);
				doctorPointerDao.addDoctorPointer(doctorPointer);	
				result = true;
				message = "등록되었습니다.";
				
			} 
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("comSeq", comSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	// 지표입력 혈당 삭제
	@RequestMapping("/admin/doctor_index_input/blood_delete_do.go")
	public String bloodDeleteDoController(@RequestParam int comSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 지표입력 혈당 삭제
			doctorPointerDao.deleteDoctorPointer(comSeq);

			map.put("message", "삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	
	
	// 지표입력 혈당 수정의 처리
	@RequestMapping("/admin/doctor_index_input/blood_edit_table_do.go")
	public String bloodTableEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			DoctorPointer doctorPointer  = doctorPointerDao.getDoctorPointer(comSeq);
			doctorPointer.setComment(comment);
			doctorPointerDao.updateDoctorPointer(comment, comSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("comSeq", comSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 혈당 sort 값 변경처리
	@RequestMapping("/admin/blood/sort_edit_do.go")
	public String sortBloodEditController(
			@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			int sortCount = sortList.length;

			if(sortList != null || !(sortList.equals("")) ){
				
				for (int i = 0; i <sortCount; i++) {
	
					int cSeq = Integer.parseInt(sortList[i]);
					
					//MedExam medExam = medExamDao.getMedExam(sort);
					//medExam.setSort(i+1);
					doctorPointerDao.updateDoctorPointer(i+1, cSeq);
					result = true;
					message = "수정되었습니다.";
				}
			
			}
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	

	
	
	// 닥터톡 - 지표입력 < 혈당 마지막 질문 값 처리
	@RequestMapping("/admin/blood/blood_checkQuest_do.go")
	public String bloodQuestEditController(
			@RequestParam(value = "comSeq", required = false, defaultValue = "") int comSeq,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {

			doctorPointerDao.updateDoctorPointerIsLast(1,comSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	
	
	
	// 닥터톡 - 지표입력 < 혈압
	@RequestMapping("/admin/doctor_index_input/pressure.go")
	public String pressureController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/pressure";
	}

	// 닥터톡 - 지표입력 < 혈압 리스트

	@RequestMapping("/admin/doctor_index_input/pressure_list.go")
	public String pressureListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<DoctorPointer> list = null;
		int count = 0;

		list = doctorPointerDao.getPressList(page, ITEM_COUNT_PER_PAGE);
		count = doctorPointerDao.getPressCount();

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/pressure_list";
	}
	
	
	
	// 지표입력 혈압 등록/수정
	@RequestMapping("/admin/doctor_index_input/pressure_edit.go")
	public String pressureEditController(
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			Model model) {

		DoctorPointer doctorPointer = null;
		
		if (comSeq == 0) {
			doctorPointer = new DoctorPointer();
		} else {
			doctorPointer = doctorPointerDao.getDoctorPointer(comSeq);
		}

		model.addAttribute("doctorPointer", doctorPointer);

		return "/admin/doctor_index_input/pressure_edit";
	}

	// 지표입력 혈압 등록의 처리
	@RequestMapping("/admin/doctor_index_input/pressure_edit_do.go")
	public String pressureEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
			@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
//			@RequestParam(value = "move", required = false, defaultValue = "0") int move,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			if (comSeq == 0) {
				
				DoctorPointer doctorPointer = new DoctorPointer();
				doctorPointer.setDiseaseId("press");
				doctorPointer.setAskind(askind);
				doctorPointer.setComment(comment);
				doctorPointer.setAnsType(ansType);
				//doctorPointer.setMove(move);
				doctorPointerDao.addDoctorPointer(doctorPointer);	
				result = true;
				message = "등록되었습니다.";
				
			} 
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("comSeq", comSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	// 지표입력 혈압 삭제
	@RequestMapping("/admin/doctor_index_input/pressure_delete_do.go")
	public String pressureDeleteDoController(@RequestParam int comSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 지표입력 혈당 삭제
			doctorPointerDao.deleteDoctorPointer(comSeq);

			map.put("message", "삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	
	
	// 지표입력 혈압 수정의 처리
	@RequestMapping("/admin/doctor_index_input/pressure_edit_table_do.go")
	public String pressureTableEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			DoctorPointer doctorPointer  = doctorPointerDao.getDoctorPointer(comSeq);
			doctorPointer.setComment(comment);
			doctorPointerDao.updateDoctorPointer(comment, comSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("comSeq", comSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	
	// 혈압 sort 값 변경처리
	@RequestMapping("/admin/pressure/sort_edit_do.go")
	public String sortPressureEditController(
			@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			int sortCount = sortList.length;

			if(sortList != null || !(sortList.equals("")) ){
				
				for (int i = 0; i <sortCount; i++) {
	
					int cSeq = Integer.parseInt(sortList[i]);
					
					//MedExam medExam = medExamDao.getMedExam(sort);
					//medExam.setSort(i+1);
					doctorPointerDao.updateDoctorPointer(i+1, cSeq);
					result = true;
					message = "수정되었습니다.";
				}
			
			}
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	// 닥터톡 - 지표입력 < 혈압 마지막 질문 값 처리
	@RequestMapping("/admin/pressure/pressure_checkQuest_do.go")
	public String pressureQuestEditController(
			@RequestParam(value = "comSeq", required = false, defaultValue = "") int comSeq,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {

			doctorPointerDao.updateDoctorPointerIsLast(1,comSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	// 닥터톡 - 지표입력 < 콜레스테롤
	@RequestMapping("/admin/doctor_index_input/cholesterol.go")
	public String cholesterolController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/cholesterol";
	}

	// 닥터톡 - 지표입력 < 콜레스테롤 리스트

	@RequestMapping("/admin/doctor_index_input/cholesterol_list.go")
	public String cholesterolListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<DoctorPointer> list = null;
		int count = 0;
		
		list = doctorPointerDao.getColList(page, ITEM_COUNT_PER_PAGE);
		count = doctorPointerDao.getColCount();

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/cholesterol_list";
	}
	
	// 지표입력 콜레스테롤 등록/수정
		@RequestMapping("/admin/doctor_index_input/cholesterol_edit.go")
		public String cholesterolEditController(
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				Model model) {

			DoctorPointer doctorPointer = null;
			
			if (comSeq == 0) {
				doctorPointer = new DoctorPointer();
			} else {
				doctorPointer = doctorPointerDao.getDoctorPointer(comSeq);
			}

			model.addAttribute("doctorPointer", doctorPointer);

			return "/admin/doctor_index_input/cholesterol_edit";
		}

		// 지표입력 콜레스테롤 등록의 처리
		@RequestMapping("/admin/doctor_index_input/cholesterol_edit_do.go")
		public String cholesterolEditDoController(
				HttpServletRequest req,
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
//				@RequestParam(value = "move", required = false, defaultValue = "0") int move,
				HttpServletResponse res, Model model) throws IllegalStateException,
				IOException {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				if (comSeq == 0) {
					
					DoctorPointer doctorPointer = new DoctorPointer();
					doctorPointer.setDiseaseId("col");
					doctorPointer.setAskind(askind);
					doctorPointer.setComment(comment);
					doctorPointer.setAnsType(ansType);
					//doctorPointer.setMove(move);
					doctorPointerDao.addDoctorPointer(doctorPointer);	
					result = true;
					message = "등록되었습니다.";
					
				} 
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 map.put("comSeq", comSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		// 지표입력 콜레스테롤 삭제
		@RequestMapping("/admin/doctor_index_input/cholesterol_delete_do.go")
		public String cholesterolDeleteDoController(@RequestParam int comSeq,
				HttpServletResponse res) {

			Map<String, Object> map = new HashMap<String, Object>();

			try {
				// 지표입력 콜레스테롤 삭제
				doctorPointerDao.deleteDoctorPointer(comSeq);

				map.put("message", "삭제되었습니다.");
				map.put("result", true);
			} catch (Exception e) {

				map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
				map.put("result", false);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);

			return null;
		}
		
		
		
		// 지표입력 콜레스테롤 수정의 처리
		@RequestMapping("/admin/doctor_index_input/cholesterol_edit_table_do.go")
		public String cholesterolTableEditDoController(
				HttpServletRequest req,
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				HttpServletResponse res, Model model) throws IllegalStateException,
				IOException {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				DoctorPointer doctorPointer  = doctorPointerDao.getDoctorPointer(comSeq);
				doctorPointer.setComment(comment);
				doctorPointerDao.updateDoctorPointer(comment, comSeq);
				result = true;
				message = "수정되었습니다.";
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 map.put("comSeq", comSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		
		// 콜레스테롤 sort 값 변경처리
		@RequestMapping("/admin/cholesterol/sort_edit_do.go")
		public String sortCholesterolEditController(
				@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				int sortCount = sortList.length;

				if(sortList != null || !(sortList.equals("")) ){
					
					for (int i = 0; i <sortCount; i++) {
		
						int cSeq = Integer.parseInt(sortList[i]);
						
						//MedExam medExam = medExamDao.getMedExam(sort);
						//medExam.setSort(i+1);
						doctorPointerDao.updateDoctorPointer(i+1, cSeq);
						result = true;
						message = "수정되었습니다.";
					}
				
				}
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 //map.put("medSeq", medSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
	
		// 닥터톡 - 지표입력 < 콜레스테롤 마지막 질문 값 처리
		@RequestMapping("/admin/cholesterol/cholesterol_checkQuest_do.go")
		public String cholesterolQuestEditController(
				@RequestParam(value = "comSeq", required = false, defaultValue = "") int comSeq,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {

				doctorPointerDao.updateDoctorPointerIsLast(1,comSeq);
				result = true;
				message = "수정되었습니다.";
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 //map.put("medSeq", medSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
	
	
	
	
	
	
	
	// 닥터톡 - 지표입력 < 체중,당화혈색소
	@RequestMapping("/admin/doctor_index_input/weight.go")
	public String weightController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/weight";
	}

	// 닥터톡 - 지표입력 < 체중,당화혈색소 리스트

	@RequestMapping("/admin/doctor_index_input/weight_list.go")
	public String weightListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<DoctorPointer> list = null;
		int count = 0;

		list = doctorPointerDao.getWeightList(page, ITEM_COUNT_PER_PAGE);
		count = doctorPointerDao.getWeightCount();

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/weight_list";
	}
	
	// 지표입력 체중,당화혈색소 등록/수정
		@RequestMapping("/admin/doctor_index_input/weight_edit.go")
		public String weightEditController(
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				Model model) {

			DoctorPointer doctorPointer = null;
			
			if (comSeq == 0) {
				doctorPointer = new DoctorPointer();
			} else {
				doctorPointer = doctorPointerDao.getDoctorPointer(comSeq);
			}

			model.addAttribute("doctorPointer", doctorPointer);

			return "/admin/doctor_index_input/weight_edit";
		}

		// 지표입력 체중,당화혈색소 등록의 처리
		@RequestMapping("/admin/doctor_index_input/weight_edit_do.go")
		public String weightEditDoController(
				HttpServletRequest req,
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
//				@RequestParam(value = "move", required = false, defaultValue = "0") int move,
				HttpServletResponse res, Model model) throws IllegalStateException,
				IOException {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				if (comSeq == 0) {
					
					DoctorPointer doctorPointer = new DoctorPointer();
					doctorPointer.setDiseaseId("weight");
					doctorPointer.setAskind(askind);
					doctorPointer.setComment(comment);
					doctorPointer.setAnsType(ansType);
					//doctorPointer.setMove(move);
					doctorPointerDao.addDoctorPointer(doctorPointer);	
					result = true;
					message = "등록되었습니다.";
					
				} 
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 map.put("comSeq", comSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		// 지표입력 체중,당화혈색소 삭제
		@RequestMapping("/admin/doctor_index_input/weight_delete_do.go")
		public String weightDeleteDoController(@RequestParam int comSeq,
				HttpServletResponse res) {

			Map<String, Object> map = new HashMap<String, Object>();

			try {
				// 지표입력 체중,당화혈색소 삭제
				doctorPointerDao.deleteDoctorPointer(comSeq);

				map.put("message", "삭제되었습니다.");
				map.put("result", true);
			} catch (Exception e) {

				map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
				map.put("result", false);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);

			return null;
		}
		
		
		
		// 지표입력 체중,당화혈색소 수정의 처리
		@RequestMapping("/admin/doctor_index_input/weight_edit_table_do.go")
		public String weightTableEditDoController(
				HttpServletRequest req,
				@RequestParam(value = "comSeq", required = false, defaultValue = "0") int comSeq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				HttpServletResponse res, Model model) throws IllegalStateException,
				IOException {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				DoctorPointer doctorPointer  = doctorPointerDao.getDoctorPointer(comSeq);
				doctorPointer.setComment(comment);
				doctorPointerDao.updateDoctorPointer(comment, comSeq);
				result = true;
				message = "수정되었습니다.";
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 map.put("comSeq", comSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		// 체중,당화혈색소 sort 값 변경처리
		@RequestMapping("/admin/weight/sort_edit_do.go")
		public String sortWeightlEditController(
				@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				int sortCount = sortList.length;

				if(sortList != null || !(sortList.equals("")) ){
					
					for (int i = 0; i <sortCount; i++) {
		
						int cSeq = Integer.parseInt(sortList[i]);
						
						//MedExam medExam = medExamDao.getMedExam(sort);
						//medExam.setSort(i+1);
						doctorPointerDao.updateDoctorPointer(i+1, cSeq);
						result = true;
						message = "수정되었습니다.";
					}
				
				}
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 //map.put("medSeq", medSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
	
		
		// 닥터톡 - 지표입력 < 체중,당화혈색소 마지막 질문 값 처리
		@RequestMapping("/admin/weight/weight_checkQuest_do.go")
		public String weightQuestEditController(
				@RequestParam(value = "comSeq", required = false, defaultValue = "") int comSeq,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {

				doctorPointerDao.updateDoctorPointerIsLast(1,comSeq);
				result = true;
				message = "수정되었습니다.";
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			 //map.put("medSeq", medSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
	
	
	// 닥터톡 - 지표입력 < 비질환 대화관리
	@RequestMapping("/admin/doctor_index_input/splenopathy.go")
	public String splenopathyController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_input/splenopathy";
	}

	// 닥터톡 - 지표입력 < 비질환 대화관리

	@RequestMapping("/admin/doctor_index_input/splenopathy_list.go")
	public String splenopathyListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_input/splenopathy_list";
	}
	
	
	
	// 닥터톡 - 지표관리 < 혈당
	@RequestMapping("/admin/doctor_index_manage/blood.go")
	public String bloodManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/blood";
	}

	// 닥터톡 - 지표관리 < 혈당 리스트

	@RequestMapping("/admin/doctor_index_manage/blood_list.go")
	public String bloodManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/blood_list";
	}
	
	
	// 닥터톡 - 지표관리 < 혈압
	@RequestMapping("/admin/doctor_index_manage/pressure.go")
	public String pressureManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/pressure";
	}

	// 닥터톡 - 지표관리 < 혈압 리스트

	@RequestMapping("/admin/doctor_index_manage/pressure_list.go")
	public String pressureManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/pressure_list";
	}
	
	
	// 닥터톡 - 지표관리 < 콜레스테롤
	@RequestMapping("/admin/doctor_index_manage/cholesterol.go")
	public String cholesterolManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/cholesterol";
	}

	// 닥터톡 - 지표관리 < 콜레스테롤 리스트

	@RequestMapping("/admin/doctor_index_manage/cholesterol_list.go")
	public String cholesterolManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/cholesterol_list";
	}
	
	
	// 닥터톡 - 지표관리 < 체중,당화혈색소
	@RequestMapping("/admin/doctor_index_manage/weight.go")
	public String weightManageController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_index_manage/weight";
	}

	// 닥터톡 - 지표관리 < 체중,당화혈색소 리스트

	@RequestMapping("/admin/doctor_index_manage/weight_list.go")
	public String weightManageListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

//		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

	//	model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/doctor_index_manage/weight_list";
	}
	
	
	// 닥터톡 - CV Risk > CV Risk
	@RequestMapping("/admin/doctor_cv_risk/cv_risk.go")
	public String cvRiskController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/doctor_cv_risk/cv_risk";
	}

	// 닥터톡 - CV Risk > CV Risk 리스트

	@RequestMapping("/admin/doctor_cv_risk/cv_risk_list.go")
	public String cvRiskListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Cvrisk> list = null;
		int count = 0;

		list = cvriskDao.getCvriskList(page, ITEM_COUNT_PER_PAGE);
		count = cvriskDao.getCount();


		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "/admin/doctor_cv_risk/cv_risk_list";
	}
	
	
	
	// 닥터톡 - CV Risk > CV Risk 등록/수정
	@RequestMapping("/admin/doctor_cv_risk/cv_risk_edit.go")
	public String cvRiskEditController(
			@RequestParam(value = "cvSeq", required = false, defaultValue = "0") int cvSeq,
			Model model) {

		Cvrisk cvrisk = null;
		if (cvSeq == 0) {
			cvrisk = new Cvrisk();
		} else {
			cvrisk = cvriskDao.getCvriskList(cvSeq);
		}

		model.addAttribute("cvrisk", cvrisk);

		return "/admin/doctor_cv_risk/cv_risk_edit";
	}

	// 닥터톡 - CV Risk > CV Risk 수정의 처리
	@RequestMapping("/admin/doctor_cv_risk/cv_risk_edit_do.go")
	public String cvRiskEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "cvSeq", required = false, defaultValue = "0") int cvSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
			@RequestParam(value = "value", required = false, defaultValue = "0") int value,
			@RequestParam(value = "move", required = false, defaultValue = "0") int move,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			if (cvSeq == 0) {
				
				Cvrisk cvrisk = new Cvrisk();
				cvrisk.setAskind(askind);
				cvrisk.setComment(comment);
				//medExam.setValue(value);
				cvrisk.setMove(move);
				cvriskDao.addCvrisk(cvrisk);		
				result = true;
				message = "등록되었습니다.";
				
			} 
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("cvSeq", cvSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	// 닥터톡 - CV Risk > CV Risk 삭제
	@RequestMapping("/admin/doctor_cv_risk/cv_risk_delete_do.go")
	public String cvRiskDeleteDoController(@RequestParam int cvSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 닥터톡 - CV Risk > CV Risk 삭제
			cvriskDao.deleteCvrisk(cvSeq);

			map.put("message", "삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	// 닥터톡 - CV Risk > CV Risk 수정의 처리
	@RequestMapping("/admin/doctor_cv_risk/cv_risk_edit_table_do.go")
	public String cvRiskTableEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "cvSeq", required = false, defaultValue = "0") int cvSeq,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			Cvrisk cvrisk = cvriskDao.getCvriskList(cvSeq);
			cvrisk.setComment(comment);
			cvriskDao.updateCvrisk(comment, cvSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("cvSeq", cvSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 닥터톡 - CV Risk > CV Risk sort 값 변경처리
	@RequestMapping("/admin/cv_risk/sort_edit_do.go")
	public String cvRisksortEditController(
			@RequestParam(value = "sortList", required = false, defaultValue = "") String[] sortList,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {
			
			int sortCount = sortList.length;

			// logContents 리스트 갯수만큼 로그 저장
			
			if(sortList != null || !(sortList.equals("")) ){
				
				for (int i = 0; i <sortCount; i++) {
	
					int cSeq = Integer.parseInt(sortList[i]);
					
					//MedExam medExam = medExamDao.getMedExam(sort);
					//medExam.setSort(i+1);
					cvriskDao.updateCvrisk(i+1, cSeq);
					result = true;
					message = "수정되었습니다.";
				}
			
			}
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	//  닥터톡 - CV Risk > CV Risk 마지막 질문 값 처리
	@RequestMapping("/admin/cv_risk/cv_risk_checkQuest_do.go")
	public String cv_riskQuestEditController(
			@RequestParam(value = "cvSeq", required = false, defaultValue = "") int cvSeq,
			HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		try {

			cvriskDao.updateCvriskIsLast(1, cvSeq);
			result = true;
			message = "수정되었습니다.";
			
		} catch (Exception e) {
			message = e.getMessage();
		}
		 //map.put("medSeq", medSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	// 닥터톡 - 관리목표/주기 > 관리주기 안내
	@RequestMapping("/admin/period_manage/period.go")
	public String periodController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/period_manage/period";
	}
	
	
	// 닥터톡 - 관리목표/주기 > 관리주기 안내 리스트

	@RequestMapping("/admin/period_manage/period_list.go")
	public String periodListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Cvrisk> list = null;
		int count = 0;

		list = cvriskDao.getCvriskList(page, ITEM_COUNT_PER_PAGE);
		count = cvriskDao.getCount();


		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "/admin/period_manage/period_list";
	}
	
	
	
	
	
	// 컨텐츠 관리 > 건강매거진
	@RequestMapping("/admin/contents/contents.go")
	public String contentsController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/contents/contents";
	}

	// 건강매거진 리스트
	@RequestMapping("/admin/contents/contents_list.go")
	public String contentsListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Magazine> list = null;
		int count = 0;

		if (keyword.equals("")) {

			list = magazineDao.getMagazineList(page, ITEM_COUNT_PER_PAGE);
			count = magazineDao.getCount();

		} else {

			list = magazineDao.getMagazineList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = magazineDao.getCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE, PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/contents/contents_list";
	}

	// 건강매거진 등록/수정
	@RequestMapping("/admin/contents/contents_edit.go")
	public String contentsEditController(
			@RequestParam(value = "mSeq", required = false, defaultValue = "0") int mSeq,
			Model model) {

		Magazine magazine = null;
		List<MagazinePage> pageList = new ArrayList<MagazinePage>();
		if (mSeq == 0) {
			magazine = new Magazine();
		} else {
			magazine = magazineDao.getMagazine(mSeq);
			pageList = magazinepageDao.getMagazinePageList(mSeq);
			
		}
		
		model.addAttribute("magazine", magazine);
		model.addAttribute("pageList", pageList);
		return "admin/contents/contents_edit";
	}

	// 건강매거진 수정의 처리
	@RequestMapping("/admin/contents/contents_edit_do.go")
	public String contentsEditDoController(
			HttpServletRequest req,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		
		int mSeq = 0;
		
		try {
			String FILE_PATH = "/files/magazine/";
			String FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
			String photo = "";
			String path = "";
			String photoPre = "";
			int fileSize = FILE_MAX_SIZE * 1024 * 1024;
			String fileName = "";
			String thumbName = "";

			req.setCharacterEncoding("utf-8");

			File file = null;
			MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileSize, "UTF-8", new UniqFileRenamePolicy());
			
			mSeq = Integer.parseInt(F.nullCheck(multi.getParameter("mSeq"), "0"));
			String userId = F.nullCheck(multi.getParameter("userId"), "");
			String title = F.nullCheck(multi.getParameter("title"), "");
			String subTitle = F.nullCheck(multi.getParameter("subTitle"), "");
			String contents = F.nullCheck(multi.getParameter("contents"), "");
			String year = F.nullCheck(multi.getParameter("year"), "");
			String month = F.nullCheck(multi.getParameter("month"), "");

			Enumeration files = multi.getFileNames();
			while (files.hasMoreElements()) {
				String elementName = (String) files.nextElement();
				file = multi.getFile(elementName);
				if (file != null) {
					fileName = file.getName();
				}
				
			}
			
			// 축소이미지 저장
			File newFile = new File(FILE_LOCAL_PATH + fileName);
			File thumbFile = new File(FILE_LOCAL_PATH +"thumb/"+fileName);
			if (!thumbFile.exists()) {
				thumbFile.mkdirs();
			}
			try {
				ImageUtil.resize(newFile, thumbFile, 300, 0);
				result = true;
			} catch (IOException e) {
				e.printStackTrace();
			}

			if (mSeq == 0) {
				Magazine magazine = new Magazine();
				magazine.setContents(contents);
				magazine.setMonth(year+"-"+month);
				magazine.setTitle(title);
				magazine.setSubTitle(subTitle);
				magazine.setFileName(fileName);
				magazine.setThumFile(fileName);
				mSeq = magazineDao.addMagazine(magazine);

				result = true;
				message = "등록되었습니다.";
			} else {
				Magazine magazine = magazineDao.getMagazine(mSeq);
				magazine.setContents(contents);
				magazine.setMonth(year+"-"+month);
				magazine.setTitle(title);
				magazine.setSubTitle(subTitle);
				if (fileName.equals("") == false) {
					magazine.setFileName(fileName);
					magazine.setThumFile(fileName);
				}
				magazineDao.updateMagazine(magazine);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		 map.put("mSeq", mSeq);
		 map.put("result", result);
		 map.put("message", message);
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	

	// 건강매거진 삭제
	@RequestMapping("/admin/contents/contents_delete_do.go")
	public String contentsDeleteDoController(@RequestParam int noticeSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			noticeDao.deleteNotice(noticeSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}


	// 건강매거진 삭제
	@RequestMapping("/admin/contents/contents_file_delete.go")
	public String contentsFileDeleteController(
			@RequestParam(value = "mSeq", required = false, defaultValue = "0") int mSeq,
			@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {

			String FILE_LOCAL_PATH = FILE_ROOT + "/files/magazine/";
			String filePath = FILE_LOCAL_PATH + fileName;
			String thumbPath = FILE_LOCAL_PATH + "thumb/"+ fileName;
			
			File file = new File(filePath);
			file.delete();
			
			File thumb = new File(thumbPath);
			thumb.delete();

			// 게시물 업데이트
			magazineDao.updateMagazineFile(mSeq, "");

			map.put("message", "파일이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "파일이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	// 서브 등록/수정
		@RequestMapping("/admin/contents/subcontents_edit.go")
		public String subcontentsEditController(
				@RequestParam(value = "pSeq", required = false, defaultValue = "0") int pSeq,
				@RequestParam(value = "mSeq", required = false, defaultValue = "0") int mSeq,
				Model model) {

			MagazinePage mp = null;
			
			if (pSeq == 0) {
				mp = new MagazinePage();
				int page= magazinepageDao.getMagazinePageCnt(mSeq);
				model.addAttribute("page", page+1);
			} else {
				mp = magazinepageDao.getMagaginePage(pSeq);
				model.addAttribute("page", mp.getPage());
			}
			model.addAttribute("mSeq", mSeq);
			model.addAttribute("mp", mp);
			
			return "admin/contents/subcontents_edit";
		}
		


		// 건강매거진 서브 수정의 처리
		@RequestMapping("/admin/contents/subcontents_edit_do.go")
		public String subcontentsEditDoController(
				HttpServletRequest req,
				@RequestParam(value = "pageFilename", required=false) MultipartFile multipartFile,
				HttpServletResponse res, Model model) throws IllegalStateException,
				IOException {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			int mSeq = 0;
			
			try {
				String FILE_PATH = "/files/submagazine/";
				String FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
				String photo = "";
				String path = "";
				String photoPre = "";
				int fileSize = FILE_MAX_SIZE * 1024 * 1024;

				String fileName = "";
				String thumbName = "";

				req.setCharacterEncoding("utf-8");
					 
				File file = null;
				MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileSize, "UTF-8", new UniqFileRenamePolicy());
				
				mSeq = Integer.parseInt(F.nullCheck(multi.getParameter("mSeq"), "0"));
				int pSeq = Integer.parseInt(F.nullCheck(multi.getParameter("pSeq"), "0"));
				String userId = F.nullCheck(multi.getParameter("userId"), "");
				String pageTitle = F.nullCheck(multi.getParameter("pageTitle"), "");
				String pageContents = F.nullCheck(multi.getParameter("pageContents"), "");
				int page = Integer.parseInt(F.nullCheck(multi.getParameter("page"), "0"));

				Enumeration files = multi.getFileNames();
				while (files.hasMoreElements()) {
					String elementName = (String) files.nextElement();
					file = multi.getFile(elementName);
					if (file != null) {
						fileName = file.getName();
					}
					
				}

				// 축소이미지 저장
				File newFile = new File(FILE_LOCAL_PATH + fileName);
				File thumbFile = new File(FILE_LOCAL_PATH +"thumb/"+fileName);
				if (!thumbFile.exists()) {
					thumbFile.mkdirs();
				}
				try {
					ImageUtil.resize(newFile, thumbFile, 100, 0);
					result = true;
				} catch (IOException e) {
					e.printStackTrace();
				}

				if (pSeq == 0) {
					MagazinePage mp = new MagazinePage();
					mp.setmSeq(mSeq);
					mp.setPageContents(pageContents);
					mp.setPageTitle(pageTitle);
					mp.setPage(page);
					mp.setPageFilename(fileName);
					mp.setPageThumname(fileName);
					pSeq = magazinepageDao.addMagazinePage(mp);

					result = true;
					message = "등록되었습니다.";
				} else {
					MagazinePage mp = magazinepageDao.getMagaginePage(pSeq);
					mp.setmSeq(mSeq);
					mp.setPageContents(pageContents);
					mp.setPageTitle(pageTitle);
					mp.setPage(page);
					if (fileName.equals("") == false) {
						mp.setPageFilename(fileName);
						mp.setPageThumname(fileName);
					}
					magazinepageDao.updateMagazinePage(mp);
					result = true;
					message = "수정되었습니다.";
				}
			} catch (Exception e) {
				message = e.getMessage();
			}
			 map.put("mSeq", mSeq);
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		// 건강매거진 서브 이미지 삭제
		@RequestMapping("/admin/contents/subcontents_file_delete.go")
		public String subcontentsFileDeleteController(
				@RequestParam(value = "pSeq", required = false, defaultValue = "0") int pSeq,
				@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName,
				HttpServletResponse res) {

			Map<String, Object> map = new HashMap<String, Object>();

			try {

				String FILE_LOCAL_PATH = FILE_ROOT + "/files/submagazine/";
				String filePath = FILE_LOCAL_PATH + fileName;
				String thumbPath = FILE_LOCAL_PATH + "thumb/"+ fileName;
				
				File file = new File(filePath);
				file.delete();
				
				File thumb = new File(thumbPath);
				thumb.delete();

				// 게시물 업데이트
				magazinepageDao.updateFile("",pSeq);
				map.put("pSeq", pSeq);
				map.put("message", "파일이 삭제되었습니다.");
				map.put("result", true);
			} catch (Exception e) {

				map.put("message", "파일이 삭제되지 않았습니다.\n" + e.getMessage());
				map.put("result", false);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);

			return null;
		}
		
		//서브페이지 삭제
		@RequestMapping("/admin/contents/subcontents_delete_do.go")
		public String subcontentsDeleteController(
				@RequestParam(value = "pSeq", required = false, defaultValue = "0") int pSeq,
				
				HttpServletResponse res) {

			Map<String, Object> map = new HashMap<String, Object>();

			try {
				MagazinePage mp = magazinepageDao.getMagaginePage(pSeq);
				String fileName = mp.getPageFilename();
				
				String FILE_LOCAL_PATH = FILE_ROOT + "/files/submagazine/";
				String filePath = FILE_LOCAL_PATH + fileName;
				String thumbPath = FILE_LOCAL_PATH + "thumb/"+ fileName;
				
				File file = new File(filePath);
				file.delete();
				
				File thumb = new File(thumbPath);
				thumb.delete();

				// 게시물 삭제
				magazinepageDao.deleteMagazinePage(pSeq);
				
				List<MagazinePage>list = magazinepageDao.getMagazinePageList(mp.getmSeq());
				for(int i=1;i<list.size()+1;i++){
					int seq = (list.get(i-1)).getpSeq();
					magazinepageDao.updatePage(seq, i);
				}
				
				map.put("message", "페이지가 삭제되었습니다.");
				map.put("result", true);
			} catch (Exception e) {

				map.put("message", "페이지가 삭제되지 않았습니다.\n" + e.getMessage());
				map.put("result", false);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);

			return null;
		}

		
		@RequestMapping("/admin/contents/subcontents_sort_do.go")
		public String subsortEditController(
				@RequestParam(value = "arrSeq", required = false, defaultValue = "") String[] arrSeq,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				int Count = arrSeq.length;

				if(arrSeq != null || !(arrSeq.equals("")) ){
					
					for (int i = 0; i < Count; i++) {
						
						int pSeq = Integer.parseInt(arrSeq[i]);
					
						magazinepageDao.updatePage(pSeq, i+1);
						
						result = true;
						message = "수정되었습니다.";
					}
				
				}
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}

		//1일주기 컨텐츠
		
		@RequestMapping("/admin/day/contents.go")
		public String dayConController(
			HttpServletResponse res, Model model) {
			//int maxnum = daydao.getGroupCount();
			model.addAttribute("daygroup", daydao.daygroup());
			return "/admin/day/contents";	
		}

	// 1일주기 컨텐츠

		@RequestMapping("/admin/day/contents_list.go")
		public String dayConController(
				@RequestParam(value = "group", required = false, defaultValue = "1") int group,
				HttpServletResponse res, Model model) {
		
			
			
			try {
					List<Day>list =daydao.getDaylist(group);
					model.addAttribute("list", list);
					model.addAttribute("group", group);
					model.addAttribute("genderType", list.get(0).getGenderType());
			}catch(Exception e){
				
			}
		
			return "/admin/day/contents_list";
		}
		//정렬
		@RequestMapping("/admin/day/contents_sort_do.go")
		public String daysortEditController(
				@RequestParam(value = "arrSeq", required = false, defaultValue = "") String[] arrSeq,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				int Count = arrSeq.length;

				if(arrSeq != null || !(arrSeq.equals("")) ){
					
					for (int i = 0; i < Count; i++) {
						
						int daySeq = Integer.parseInt(arrSeq[i]);
					
						daydao.updatesort(daySeq, i+1);
						
						result = true;
						message = "수정되었습니다.";
					}
				
				}
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		//컨텐츠 수정
		@RequestMapping("/admin/day/contents_list_edit_do.go")
		public String dayeditdoConController(
				@RequestParam(value = "daySeq", required = false, defaultValue = "0") int daySeq,
				@RequestParam(value = "daygroup", required = false, defaultValue = "0") int daygroup,
				@RequestParam(value = "goseq", required = false, defaultValue = "0") int move,
				@RequestParam(value = "pseq", required = false, defaultValue = "0") int pseq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
			System.out.println(comment);
			try {
					
						Day dd = new Day();
						dd.setAnsType(ansType);
						dd.setComment(comment);
						dd.setMove(move);
						dd.setDaySeq(daySeq);
						dd.setPseq(pseq);
						daydao.updateday(dd);
						map.put("message", "수정되었습니다");
						map.put("result", true);
						
					
				
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//삭제
		@RequestMapping("/admin/day/contents_list_delete.go")
		public String daydeleteController(
				@RequestParam(value = "daySeq", required = false, defaultValue = "0") int daySeq,
				@RequestParam(value = "daygroup", required = false, defaultValue = "0") int daygroup,
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
					
					daydao.deleteday(daySeq);
					List<Day>list = daydao.getDaylist(daygroup);
					for(int i=1;i<list.size()+1;i++){
						int seq = (list.get(i-1)).getDaySeq();
						daydao.updatesort(seq, i);
					}
					map.put("message", "삭제되었습니다");
					map.put("result", true);
			}catch(Exception e){
					map.put("message", e.getMessage());
					map.put("result", false);
			}
		
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
	/*	daygroup  : frm.daygroup.value,
			askind	: frm.askind.value,
		comment	: frm.comment.value,
		ansType	: frm.ansType.value,
		pseq	: frm.pseq.value,
		move	: frm.move.value,
		maxsort : frm.maxsort.value*/
		
		//추가
		@RequestMapping("/admin/day/contents_add.go")
		public String daydeleteController(
				@RequestParam(value = "daygroup", required = false, defaultValue = "0") int daygroup,
				@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
				@RequestParam(value = "pseq", required = false, defaultValue = "0") int pseq,
				@RequestParam(value = "goseq", required = false, defaultValue = "0") int move,
				@RequestParam(value = "maxsort", required = false, defaultValue = "0") int maxsort,
				@RequestParam(value = "genderType", required = false, defaultValue = "0") int genderType,
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
		
					Day dd = new Day();
					if(pseq==0){//질문추가
						System.out.println(comment);
						dd.setMove(move);
						dd.setDaygroup(daygroup);
						dd.setComment(comment);
						dd.setAnsType(ansType);
						dd.setSort(maxsort+1);
						dd.setAskind(askind);
						dd.setGenderType(genderType);
						
						
					}else{//답변추가
						dd.setDaygroup(daygroup);
						dd.setAskind(askind);
						dd.setPseq(pseq);
						dd.setMove(move);
						dd.setComment(comment);
						dd.setSort(maxsort+1);
						dd.setGenderType(genderType);
					
						
					}
					daydao.addcontent(dd);
					map.put("message", "추가되었습니다.");
					map.put("result", true);
					
			}catch(Exception e){
					map.put("message", e.getMessage());
					map.put("result", false);
			}
		
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//그룹생성
		@RequestMapping("/admin/day/addcontents.go")
		public String addgroupController(
			@RequestParam(value = "nextgroup", required = false, defaultValue = "0") int nextgroup,
			@RequestParam(value = "genderType", required = false, defaultValue = "0") int genderType,
			HttpServletResponse res, Model model) {
			Map<String, Object> map = new HashMap<String, Object>();
			
			try{
				Day dd = new Day();
				dd.setGenderType(genderType);
				dd.setDaygroup(nextgroup+1);
				
				daydao.addcontent(dd);
				map.put("message", "추가되었습니다.");
				map.put("result", true);
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
			}
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//isLast
		@RequestMapping("/admin/day/contents_isLast.go")
		public String dayisLastController(
			@RequestParam(value = "daySeq", required = false, defaultValue = "0") int daySeq,
			@RequestParam(value = "arrSeq", required = false, defaultValue = "0") String [] arrSeq,
			HttpServletResponse res, Model model) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			
			try{
				if(arrSeq != null || !(arrSeq.equals("")) ){
					
					for (int i = 0; i < arrSeq.length; i++) {
						
						int Seq = Integer.parseInt(arrSeq[i]);
						daydao.updatelast(Seq,0);
						if(Seq==daySeq){
							daydao.updatelast(Seq,1);
						}
					}
				
				}
				
				map.put("message", "변경되었습니다.");
				map.put("result", true);
				
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
			}
			
			
			
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		
		//////////////////////////1주주기
		
		// 1주기 컨텐츠

		
		@RequestMapping("/admin/week/contents.go")
		public String weekConController(
			HttpServletResponse res, Model model,
			@RequestParam(value = "diseaseId", required = false, defaultValue = "") String diseaseId
			) {
			//int maxnum = daydao.getGroupCount();
			
			List <Week>list = weekdao.getGroupCount(diseaseId);
			model.addAttribute("diseaseId", diseaseId);
			model.addAttribute("weekgroup", list);
			return "/admin/week/contents";	
			
		}
		
		@RequestMapping("/admin/week/contents_list.go")
		public String weekConController(
				@RequestParam(value = "weekgroup", required = false, defaultValue = "1") int weekgroup,
				@RequestParam(value = "diseaseId", required = false, defaultValue = "") String diseaseId,
				HttpServletResponse res, Model model) {
		
			
			
			try {
					List<Week>list =weekdao.getWeeklist2(weekgroup,diseaseId);
					List <Week>list2 = weekdao.getGroupCount(diseaseId);
					model.addAttribute("weekgroup", list2);
					model.addAttribute("diseaseId", diseaseId);
					model.addAttribute("list", list);
					model.addAttribute("group", weekgroup);
			}catch(Exception e){
				
			}
		
			return "/admin/week/contents_list";
		}
		//정렬
		@RequestMapping("/admin/week/contents_sort_do.go")
		public String weeksortEditController(
				@RequestParam(value = "arrSeq", required = false, defaultValue = "") String[] arrSeq,
				HttpServletResponse res, Model model) {

			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			try {
				
				int Count = arrSeq.length;

				if(arrSeq != null || !(arrSeq.equals("")) ){
					
					for (int i = 0; i < Count; i++) {
						
						int Seq = Integer.parseInt(arrSeq[i]);
					
						weekdao.updatesortWeek(Seq, i+1);
						
						result = true;
						message = "수정되었습니다.";
					}
				
				}
				
			} catch (Exception e) {
				message = e.getMessage();
			}
			
			 map.put("result", result);
			 map.put("message", message);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		//컨텐츠 수정
		@RequestMapping("/admin/week/contents_list_edit_do.go")
		public String weekeditdoConController(
				@RequestParam(value = "weekSeq", required = false, defaultValue = "0") int weekSeq,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
	
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
		
			try {
					
						Week ww = new Week();
						//ww.setWeekgroup(weekgroup);
						ww.setWeekSeq(weekSeq);
						ww.setComment(comment);
						ww.setAnsType(ansType);
						weekdao.updateWeek(ww);
						map.put("message", "수정되었습니다");
						map.put("result", true);
						
					
				
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//삭제
		@RequestMapping("/admin/week/contents_list_delete.go")
		public String weekdeleteController(
				@RequestParam(value = "weekSeq", required = false, defaultValue = "0") int weekSeq,
				@RequestParam(value = "weekgroup", required = false, defaultValue = "0") int weekgroup,
				@RequestParam(value = "diseaseId", required = false, defaultValue = "0") String diseaseId,
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
					
					weekdao.deleteWeek(weekSeq);
					List<Week>list = weekdao.getWeeklist2(weekgroup, diseaseId);
					for(int i=1;i<list.size()+1;i++){
						int seq = (list.get(i-1)).getWeekSeq();
						weekdao.updatesortWeek(seq, i);
					}
					map.put("message", "삭제되었습니다");
					map.put("result", true);
			}catch(Exception e){
					map.put("message", e.getMessage());
					map.put("result", false);
			}
		
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
	
		
		//추가
		@RequestMapping("/admin/week/contents_add.go")
		public String weekaddController(
				@RequestParam(value = "weekgroup", required = false, defaultValue = "0") int weekgroup,
				@RequestParam(value = "askind", required = false, defaultValue = "0") int askind,
				@RequestParam(value = "diseaseId", required = false, defaultValue = "") String diseaseId,
				@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
				@RequestParam(value = "ansType", required = false, defaultValue = "0") int ansType,
				@RequestParam(value = "pseq", required = false, defaultValue = "0") int pseq,
				@RequestParam(value = "goseq", required = false, defaultValue = "0") int move,
				@RequestParam(value = "maxsort", required = false, defaultValue = "0") int maxsort,
				HttpServletResponse res, Model model) {
		
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
		
					Week ww = new Week();
					if(pseq==0){//질문추가
						
						
						ww.setWeekgroup(weekgroup);
						ww.setComment(comment);
						ww.setAnsType(ansType);
						ww.setSort(maxsort+1);
						ww.setAskind(askind);
						ww.setDiseaseId(diseaseId);
						
						
					}else{//답변추가
						ww.setWeekgroup(weekgroup);
						ww.setAskind(askind);
						ww.setPseq(pseq);
						ww.setMove(move);
						ww.setComment(comment);
						ww.setSort(maxsort+1);
						ww.setDiseaseId(diseaseId);
					
						
					}
					weekdao.addWeek(ww);
					map.put("message", "추가되었습니다.");
					map.put("result", true);
					
			}catch(Exception e){
					map.put("message", e.getMessage());
					map.put("result", false);
			}
		
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//그룹생성
		@RequestMapping("/admin/week/addcontents.go")
		public String weekaddgroupController(
			@RequestParam(value = "nextgroup", required = false, defaultValue = "0") int nextgroup,
			@RequestParam(value = "diseaseId", required = false, defaultValue = "") String diseaseId,
		
			HttpServletResponse res, Model model) {
			Map<String, Object> map = new HashMap<String, Object>();
			System.out.println(diseaseId);
			try{
				Week ww = new Week();
				ww.setDiseaseId(diseaseId);
				ww.setWeekgroup(nextgroup+1);
				
				weekdao.addWeek(ww);
				map.put("message", "추가되었습니다.");
				map.put("result", true);
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
			}
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		//isLast
		@RequestMapping("/admin/week/contents_isLast.go")
		public String weekisLastController(
			@RequestParam(value = "weekSeq", required = false, defaultValue = "0") int weekSeq,
			@RequestParam(value = "arrSeq", required = false, defaultValue = "0") String [] arrSeq,
			HttpServletResponse res, Model model) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			
			try{
				if(arrSeq != null || !(arrSeq.equals("")) ){
					
					for (int i = 0; i < arrSeq.length; i++) {
						
						int Seq = Integer.parseInt(arrSeq[i]);
						weekdao.updateislastWeek(Seq,0);
						if(Seq==weekSeq){
							weekdao.updateislastWeek(Seq,1);
						}
					}
				
				}
				
				map.put("message", "변경되었습니다.");
				map.put("result", true);
				
			}catch(Exception e){
				map.put("message", e.getMessage());
				map.put("result", false);
			}
			
			
			
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		
//	// 팝업 공지
//	@RequestMapping("/admin/popup/popup.go")
//	public String popup(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/popup/popup";
//	}
//
//	// 팝업 공지 리스트
//	@RequestMapping("/admin/popup/popup_list.go")
//	public String popupListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			//@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Notice> list = null;
//		int count = 0;
//		int notiType = 10;
//
//		list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//		count = noticeDao.getNoticeMainCount();
//
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		//model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/popup/popup_list";
//	}
//
//	// // 팝업공지 등록/수정
//	@RequestMapping("/admin/popup/popup_edit.go")
//	public String popupEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Notice notice = null;
//		if (seq == 0) {
//			notice = new Notice();
//		} else {
//			notice = noticeDao.getNotice(seq);
//		}
//
//		model.addAttribute("notice", notice);
//
//		return "admin/popup/popup_edit";
//	}
//	
//	
//	
//	// 팝업광고 수정의 처리
//		@RequestMapping("/admin/popup/popup_edit_do.go")    
//		public String popupEditDoController(
//					HttpServletRequest req
//		        , HttpServletResponse res
//		        , Model model
//		        ) throws Exception {
//		 
//		    req.setCharacterEncoding("utf-8");
//		     
//		    int fileMaxBiteSize = FILE_MAX_SIZE * 1024 * 1024;
//		    File file = null;
//		     
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//		     
//		    try {
//		        //파일 업로드. 
//		        //폼에서 가져온 인자값을 얻기 위해 request 객체 전달, 업로드 경로, 파일 최대 크기, 한글처리, 파일 중복처리
//		        MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileMaxBiteSize, "UTF-8", new DefaultFileRenamePolicy());
//		         
//		        // 폼에서 입력한 값을 가져옴
//		        int seq    = Integer.parseInt(F.nullCheck(multi.getParameter("seq"),"0"));
//		        String linkUrl    = F.nullCheck(multi.getParameter("linkUrl"),"");
//		        String startDate    = F.nullCheck(multi.getParameter("startDate"),"");
//		        String endDate    = F.nullCheck(multi.getParameter("endDate"),"");
//		        String backgroundColor    = F.nullCheck(multi.getParameter("backgroundColor"),"");
//		        String sido    = F.nullCheck(multi.getParameter("areaSido"),"");
//		        String gugun   = F.nullCheck(multi.getParameter("areaGugun"),"");
//		        //int price    = Integer.parseInt(F.nullCheck(multi.getParameter("price"),"0"));
//		        String MAIN_IMG = "";
//		        String THUMB_IMG = "";
//		     
//		        // 업로드한 파일들을 Enumeration 타입으로 반환.
//		        // Enumeration형은 데이터를 뽑아올때 유용한 인터페이스
//		        Enumeration files = multi.getFileNames();
//		         
//		        String sName ="";
//		        
//		        while (files.hasMoreElements()) {
//		            String elementName = (String)files.nextElement();
//		             
//		             
//		            file = multi.getFile(elementName);
//		            int i = 0;
//		            if (file != null) {
//		                if (elementName.equals("imgFile")) {
//		                    String sPath = file.getParent() + "/";
//		                    sName = file.getName();
//		                }
//		            }            
//		        }
//		        
//		        boolean result = true;
//			    String message = "";
//		     
//				if (seq == 0) {
//					Notice notice= new Notice();
//					//notice.setLinkUrl(linkUrl);
//					//notice.setBackgroundColor(backgroundColor);
//					notice.setStartDate(startDate);
//					notice.setEndDate(endDate);
//					//notice.setSido(sido);
//					//notice.setGugun(gugun);
//					notice.setContentsHtml(sName);
//					noticeDao.addNotice(notice);
//					seq = noticeDao.getLastSeq();
//					result = true;
//					message = "등록되었습니다.";
//				
//				} else {
//				    Notice notice = noticeDao.getNotice(seq);
//			        if (sName.equals("") == false) {
//			        	notice.setContentsHtml(sName);
//			        }
//					//notice.setLinkUrl(linkUrl);
//					//notice.setBackgroundColor(backgroundColor);
//					notice.setStartDate(startDate);
//					notice.setEndDate(endDate);
//					//notice.setSido(sido);
//					//notice.setGugun(gugun);
//				    noticeDao.updateNotice(notice);   
//					result = true;
//					message = "수정되었습니다.";
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//
//		    //return "redirect:/admin/notice_manager.go";
//		    return "redirect:/admin/popup/popup.go";
//		}
//			
//		//팝업광고 이미지 삭제
//		@RequestMapping("/admin/popup/popup_file_delete_do.go")
//		public String popupFileDeleteDoController(
//		        @RequestParam(value="seq", required=false, defaultValue="0") int seq, 
//		        @RequestParam(value="imgFile", required=false, defaultValue="") String imgFile, 
//		        HttpServletResponse res
//		    ) {
//		    Map<String, Object> map = new HashMap<String, Object>();
//		    boolean result = true;
//		    String message = "";
//		 
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//
//		    File file = new File(FILE_LOCAL_PATH + imgFile);
//		    file.delete();
//		    
//		    Notice notice = noticeDao.getNotice(seq);
//		    notice.setContentsHtml("");
//		    noticeDao.updateNotice(notice);    
//		    
//		    map.put("result", result);
//		    map.put("message", message);
//		 
//		    JSONObject jsonObject = JSONObject.fromObject(map);
//		    Response.responseWrite(res, jsonObject);
//		    return null;
//		}
//		
//		//팝업광고 삭제
//		@RequestMapping("/admin/popup/popup_delete_do.go")
//		public String popupDeleteDoController(
//		        @RequestParam(value="seq", required=false, defaultValue="0") int seq, 
//		        @RequestParam(value="imgFile", required=false, defaultValue="") String imgFile, 
//		        HttpServletResponse res
//		    ) {
//		    Map<String, Object> map = new HashMap<String, Object>();
//		    boolean result = true;
//		    String message = "";
//		 
//		    FILE_PATH = "/files/popup/";
//		    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
//
//		    File file = new File(FILE_LOCAL_PATH + imgFile);
//		    file.delete();
//		    
//		    Notice notice = noticeDao.getNotice(seq);
//		    notice.setContentsHtml("");
//		    noticeDao.deleteNotice(seq); 
//		    
//	    	map.put("result", result);
//		    map.put("message", message);
//		 
//		    JSONObject jsonObject = JSONObject.fromObject(map);
//		    Response.responseWrite(res, jsonObject);
//		    return null;
//		}
//	
//	
//	
//	
//	// 업그레이드 공지사항
//	@RequestMapping("/admin/update/update.go")
//	public String update(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/update/update";
//	}
//
//	// 업그레이드 공지사항 리스트
//	@RequestMapping("/admin/update/update_list.go")
//	public String updateListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		 List<Notice> list = null;
//		int count = 0;
//		int notiType = 20;
//
//		if (keyword.equals("")) {
//
//			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount();
//
//		} else {
//
//			list = noticeDao.getNoticeMainList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = noticeDao.getNoticeMainCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/update/update_list";
//	}
//
//	// 업그레이드 등록/수정
//	@RequestMapping("/admin/update/update_edit.go")
//	public String updateEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Notice notice = null;
//		if (seq == 0) {
//			notice = new Notice();
//		} else {
//			notice = noticeDao.getNotice(seq);
//		}
//
//		model.addAttribute("notice", notice);
//
//		return "admin/update/update_edit";
//	}
//
//	// 업그레이드 수정의 처리
//	@RequestMapping("/admin/update/update_edit_do.go")
//	public String updateEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "linkUrl", required = false, defaultValue = "") String linkUrl,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Notice notice = new Notice();
//				notice.setUserId(userId);
//				notice.setTitle(title);
//				// notice.setStartDate(startDate);
//				// notice.setEndDate(endDate);
//				//notice.setNotiType(notiType);
//				notice.setSendPush(sendPush);
//				notice.setLinkUrl(linkUrl);
//				// notice.setSendPush(sendPush);
//				// notice.setContentsHtml(contentsHtml);
//				// notice.setContentsText(contentsText);
//				noticeDao.addNotice(notice);
//				seq = noticeDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Notice notice = noticeDao.getNotice(seq);
//
//				notice.setUserId(userId);
//				notice.setTitle(title);
//				// notice.setStartDate(startDate);
//				// notice.setEndDate(endDate);
//				//notice.setNotiType(notiType);
//				notice.setSendPush(sendPush);
//				notice.setLinkUrl(linkUrl);
//				// notice.setContentsHtml(contentsHtml);
//				// notice.setContentsText(contentsText);
//				noticeDao.updateNotice(notice);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 업그레이드 삭제
//	@RequestMapping("/admin/update/update_delete_do.go")
//	public String updateDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			noticeDao.deleteNotice(seq);
//
//			map.put("message", "업그레이드 공지가 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "업그레이드 공지가 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//
//	// 이벤트 관리
//	@RequestMapping("/admin/event/event.go")
//	public String eventController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/event/event";
//	}
//
//	// 이벤트 리스트
//
//	@RequestMapping("/admin/event/event_list.go")
//	public String eventListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Event> list = null;
//		int count = 0;
//		int notiType = 0;
//
//		if (keyword.equals("")) {
//
//			list = eventDao.getEventList(page, ITEM_COUNT_PER_PAGE);
//			count = eventDao.getCount();
//
//		} else {
//
//			list = eventDao.getEventList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = eventDao.getCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		 model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/event/event_list";
//	}
//
//	// 이벤트 관리 등록/수정
//	@RequestMapping("/admin/event/event_edit.go")
//	public String eventEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Event event = null;
//		if (seq == 0) {
//			event = new Event();
//		} else {
//			event = eventDao.getEvent(seq);
//		}
//
//		model.addAttribute("event", event);
//
//		return "admin/event/event_edit";
//	}
//
//	// 이벤트 관리 수정의 처리
//	@RequestMapping("/admin/event/event_edit_do.go")
//	public String eventEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
//			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Event event = new Event();
//				event.setUserId(userId);
//				event.setTitle(title);
//				event.setStartDate(startDate);
//				event.setEndDate(endDate);
//				//event.setNotiType(notiType);
//				event.setSendPush(sendPush);
//				event.setContentsHtml(contentsHtml);
//				event.setContentsText(contentsText);
//				eventDao.addEvent(event);
//				seq = eventDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Event event = eventDao.getEvent(seq);
//
//				event.setUserId(userId);
//				event.setTitle(title);
//				event.setStartDate(startDate);
//				event.setEndDate(endDate);
//				//event.setNotiType(notiType);
//				event.setSendPush(sendPush);
//				event.setContentsHtml(contentsHtml);
//				event.setContentsText(contentsText);
//				eventDao.updateEvent(event);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 이벤트 관리 삭제
//	@RequestMapping("/admin/event/event_delete_do.go")
//	public String eventDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			eventDao.deleteEvent(seq);
//
//			map.put("message", "이벤트가 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "이벤트가 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//	// 1:1문의 관리
//	@RequestMapping("/admin/inquiry/inquiry.go")
//	public String inquiryController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/inquiry/inquiry";
//	}
//
//	// 1:1문의 관리 리스트
//
//	@RequestMapping("/admin/inquiry/inquiry_list.go")
//	public String inquiryListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		List<Qna> list = null;
//		int count = 0;
//
//		if (keyword.equals("")) {
//			list = qnaDao.getQnaList(page, ITEM_COUNT_PER_PAGE);
//			count = qnaDao.getCount();
//		} else {
//			list = qnaDao.getQnaList(keyword, page, ITEM_COUNT_PER_PAGE);
//			count = qnaDao.getCount(keyword);
//		}
//
//		// 페이징
//		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/inquiry/inquiry_list";
//	}
//
//	// 1:1문의 관리 등록/수정
//	@RequestMapping("/admin/inquiry/inquiry_edit.go")
//	public String inquiryEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Qna qna = null;
//		if (seq == 0) {
//			qna = new Qna();
//		} else {
//			qna = qnaDao.getQna(seq);
//		}
//
//		model.addAttribute("qna", qna);
//
//		return "admin/inquiry/inquiry_edit";
//	}
//
//	// 1:1문의 수정의 처리
//	@RequestMapping("/admin/inquiry/inquiry_edit_do.go")
//	public String inquiryEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
//			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
//			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
//			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Qna qna = new Qna();
//				qna.setUserId(userId);
//				qna.setTitle(title);
//				qna.setStartDate(startDate);
//				qna.setEndDate(endDate);
//				//qna.setNotiType(notiType);
//				qna.setSendPush(sendPush);
//				qna.setContentsHtml(contentsHtml);
//				qna.setContentsText(contentsText);
//				qnaDao.addQna(qna);
//				seq = qnaDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Qna qna = qnaDao.getQna(seq);
//
//				qna.setUserId(userId);
//				qna.setTitle(title);
//				qna.setStartDate(startDate);
//				qna.setEndDate(endDate);
//				//qna.setNotiType(notiType);
//				qna.setSendPush(sendPush);
//				qna.setContentsHtml(contentsHtml);
//				qna.setContentsText(contentsText);
//				qnaDao.updateQna(qna);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// 1:1문의 관리 삭제
//	@RequestMapping("/admin/inquiry/inquiry_delete_do.go")
//	public String inquiryDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			qnaDao.deleteQna(seq);
//
//			map.put("message", "게시물이 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}
//
//	// FAQ관리
//	@RequestMapping("/admin/faq/faq.go")
//	public String faqController(
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		return "/admin/faq/faq";
//	}
//
//	// FAQ관리 리스트
//
//	@RequestMapping("/admin/faq/faq_list.go")
//	public String faqListController(
//			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
//			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
//			HttpSession session, Model model) {
//
//		 List<Faq> list = null;
//		int count = 0;
//		int notiType = 0;
//
//		if (keyword.equals("")) {
//
//			list = faqDao.getFaqList(page, ITEM_COUNT_PER_PAGE);
//			count = faqDao.getCount();
//
//		} else {
//
//			list = faqDao.getFaqList(keyword, page,ITEM_COUNT_PER_PAGE);
//			count = faqDao.getCount(keyword);
//
//		}
//
//		// 페이징
//		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
//
//		model.addAttribute("list", list);
//		model.addAttribute("paging", paging);
//		model.addAttribute("keyword", keyword);
//		model.addAttribute("currentPage", page);
//		return "admin/faq/faq_list";
//	}
//
//	// FAQ관리 등록/수정
//	@RequestMapping("/admin/faq/faq_edit.go")
//	public String faqEditController(
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			Model model) {
//
//		Faq faq = null;
//		if (seq == 0) {
//			faq = new Faq();
//		} else {
//			faq = faqDao.getFaq(seq);
//		}
//
//		model.addAttribute("faq", faq);
//
//		return "admin/faq/faq_edit";
//	}
//
//	// FAQ관리 수정의 처리
//	@RequestMapping("/admin/faq/faq_edit_do.go")
//	public String faqEditDoController(
//			HttpServletRequest req,
//			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
//			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
//			HttpServletResponse res, Model model) throws IllegalStateException,
//			IOException {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//
//		try {
//			if (seq == 0) {
//				Faq faq = new Faq();
//				faq.setUserId(userId);
//				faq.setTitle(title);
//				//faq.setNotiType(notiType);
//				faq.setContentsHtml(contentsHtml);
//				faq.setContentsText(contentsText);
//				faqDao.addFaq(faq);
//				seq = faqDao.getLastSeq();
//
//				result = true;
//				message = "등록되었습니다.";
//			} else {
//				Faq faq = faqDao.getFaq(seq);
//
//				faq.setUserId(userId);
//				faq.setTitle(title);
//				//faq.setNotiType(notiType);
//				faq.setContentsHtml(contentsHtml);
//				faq.setContentsText(contentsText);
//				faqDao.updateFaq(faq);
//				result = true;
//				message = "수정되었습니다.";
//			}
//		} catch (Exception e) {
//			message = e.getMessage();
//		}
//		map.put("seq", seq);
//		map.put("result", result);
//		map.put("message", message);
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}
//
//	// FAQ관리 관리 삭제
//	@RequestMapping("/admin/faq/faq_delete_do.go")
//	public String faqDeleteDoController(@RequestParam int seq,
//			HttpServletResponse res) {
//
//		Map<String, Object> map = new HashMap<String, Object>();
//
//		try {
//			// 게시물 삭제
//			faqDao.deleteFaq(seq);
//
//			map.put("message", "게시물이 삭제되었습니다.");
//			map.put("result", true);
//		} catch (Exception e) {
//
//			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
//			map.put("result", false);
//		}
//
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//
//		return null;
//	}


}
