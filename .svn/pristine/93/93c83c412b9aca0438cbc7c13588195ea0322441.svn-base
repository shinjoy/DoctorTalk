
package kr.nomad.mars;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

import encrypt.Sha256Util;
import kr.nomad.mars.dao.AnalisysDao;
import kr.nomad.mars.dao.CommentDao;
import kr.nomad.mars.dao.CperiodDao;
import kr.nomad.mars.dao.CvriskDao;
import kr.nomad.mars.dao.DayDao;
import kr.nomad.mars.dao.EperiodDao;
import kr.nomad.mars.dao.MagazineDao;
import kr.nomad.mars.dao.MedExamDao;
import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.PeriodDao;
import kr.nomad.mars.dao.PointerDao;
import kr.nomad.mars.dao.UBasicDao;
import kr.nomad.mars.dao.UCntDao;
import kr.nomad.mars.dao.UColDao;
import kr.nomad.mars.dao.UCvriskDao;
import kr.nomad.mars.dao.UGoalDao;
import kr.nomad.mars.dao.UHbDao;
import kr.nomad.mars.dao.UMediDao;
import kr.nomad.mars.dao.UPresDao;
import kr.nomad.mars.dao.UPressDao;
import kr.nomad.mars.dao.UWeightDao;
import kr.nomad.mars.dao.UbloodDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dao.WeekDao;
import kr.nomad.mars.dto.Analisys;
import kr.nomad.mars.dto.Cperiod;
import kr.nomad.mars.dto.Cvrisk;
import kr.nomad.mars.dto.Day;
import kr.nomad.mars.dto.Magazine;
import kr.nomad.mars.dto.Eperiod;
import kr.nomad.mars.dto.MedExam;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.Period;
import kr.nomad.mars.dto.Pointer;
import kr.nomad.mars.dto.User;
import kr.nomad.mars.dto.UserBasic;
import kr.nomad.mars.dto.UserBlood;
import kr.nomad.mars.dto.UserCnt;
import kr.nomad.mars.dto.UserCol;
import kr.nomad.mars.dto.UserCvrisk;
import kr.nomad.mars.dto.UserGoal;
import kr.nomad.mars.dto.UserMedi;
import kr.nomad.mars.dto.UserPres;
import kr.nomad.mars.dto.UserPress;
import kr.nomad.mars.dto.UserWeight;
import kr.nomad.mars.dto.Userhb;
import kr.nomad.mars.dto.Week;
import kr.nomad.mars.dto.WeekPointer;
import kr.nomad.util.F;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import kr.nomad.util.file.UniqFileRenamePolicy;
import net.sf.json.JSONObject;

@Controller
public class ServerController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@Autowired UserDao userdao;
	
	
	
	@Autowired UbloodDao ublooddao;

	@Autowired UPressDao upressdao;
	
	@Autowired UWeightDao uweightdao;
	
	@Autowired UCntDao ucntdao;
	
	@Autowired UCvriskDao ucvriskdao;
	
	@Autowired UMediDao umedidao;
	
	@Autowired UPresDao upresdao;
	
	@Autowired UGoalDao ugoaldao;
	
	@Autowired UBasicDao ubasicdao;
	
	@Autowired NoticeDao noticedao;

	@Autowired MedExamDao medexamdao;
	
	@Autowired AnalisysDao anlisysdao;
	
	@Autowired PointerDao pointerdao;
	
	@Autowired UColDao ucoldao;
	
	@Autowired UHbDao uhbdao;
	
	@Autowired PeriodDao perioddao;
	
	@Autowired CperiodDao cperioddao;
	
	@Autowired EperiodDao eperioddao;
	
	@Autowired CvriskDao cvriskdao;
	
	@Autowired DayDao daydao;
	
	@Autowired WeekDao weekdao;
	
	@Autowired CommentDao commentdao;
	
	@Autowired WeekPointer wkpointer;

	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;
	
	
	public String GOOGLE_MAIL_ID = "csk740222@gmail.com";
	public String GOOGLE_MAIL_PW = "csk740222";

	private int category1;
	
	
	
	@RequestMapping("/api_view.go")
	public String wUserMenuController(
	        Model model
	    ) {
	 
	    return "/api_view";
	}
	/**
	 * 회원가입
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/join.go")
	public String joinController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			@RequestParam(value = "userType", required = false, defaultValue = "0") int userType,
			@RequestParam(value = "userName", required = false, defaultValue = "") String userName,
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			@RequestParam(value = "birthday", required = false, defaultValue = "") String birthday,
			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
			@RequestParam(value = "loginNaver", required = false, defaultValue = "") int loginNaver,
			@RequestParam(value = "loginKakao", required = false, defaultValue = "") int loginKakao,
			@RequestParam(value = "osType", required = false, defaultValue = "") String osType,
			@RequestParam(value = "osVersion", required = false, defaultValue = "") String osVersion,
			@RequestParam(value = "appVersion", required = false, defaultValue = "") String appVersion,
			@RequestParam(value = "deviceName", required = false, defaultValue = "") String deviceName,
			@RequestParam(value = "deviceId", required = false, defaultValue = "") String deviceId,
			@RequestParam(value = "pushkey", required = false, defaultValue = "") String pushkey,
			@RequestParam(value = "usePushservice", required = false, defaultValue = "") int usePushservice,
			@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName,
			
			
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		try {
			boolean userCheck = userdao.correctId(userId);
			if (userCheck) {
				map.put("result", false);
				map.put("message", "존재하는 아이디 입니다.");
			} else {
				
				User uu= new User();
				uu.setAppVersion(appVersion);
				uu.setBirthday(birthday);
				uu.setDeviceId(deviceId);
				uu.setDeviceName(deviceName);
				uu.setFileName(fileName);
				uu.setGender(gender);
				uu.setLoginKakao(loginKakao);
				uu.setLoginNaver(loginNaver);
				uu.setOsType(osType);
				uu.setOsVersion(osVersion);
				uu.setPhoneNumber(phoneNumber);
				uu.setPushkey(pushkey);
				uu.setStatus(1);
				uu.setUsePushservice(usePushservice);
				uu.setUserId(userId);
				uu.setUserName(userName);
				uu.setUserType(userType);
				uu.setUserMed(0);
				
				//String enPw = Sha256Util.encryptPassword(password);
				

				uu.setPassword(password);
				userdao.addUser(uu);

				map.put("result", true);
				map.put("message", "회원가입되었습니다.");
			}
		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}
		 
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		
		
		
		
		return null;
	
	}

	//프로필 이미지등록
	@RequestMapping("/m/photo_add.go")
	public String proUploadController(HttpServletRequest req, HttpServletResponse res, Model model
			
			) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = false;
		
		
		String FILE_PATH = "/files/temp/";
		String FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
		String photo = "";
		String fileName = "";
		String path = "";
		String photoPre = "";
		String userId ="";
		int fileSize = FILE_MAX_SIZE * 1024 * 1024;

		try {
				req.setCharacterEncoding("utf-8");

				File file = null;
			
				MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileSize, "UTF-8", new UniqFileRenamePolicy());
				
				path = F.nullCheck(multi.getParameter("path"), "");
				Enumeration files = multi.getFileNames();
				while (files.hasMoreElements()) {
					String elementName = (String) files.nextElement();
					file = multi.getFile(elementName);
					if (file != null) {
						photo = file.getName();
					}
					
				}
				
							String yearMonth = T.getTodayYear()+T.getTodayMonth();
							
							//fileName = userId +"_"+ photo;
							fileName = photo;
							photoPre = yearMonth+"/";
						
							File copyFolder = new File(FILE_ROOT + "/files/"+ path +"/"+photoPre);
							if (!copyFolder.exists()) {
								copyFolder.mkdirs();
							}
							// 파일 복사
							FileInputStream fis = new FileInputStream(FILE_LOCAL_PATH + photo);
							FileOutputStream fos = new FileOutputStream(FILE_ROOT + "/files/"+ path +"/"+photoPre+fileName);
							int data = 0;
							while((data=fis.read())!=-1) {
								fos.write(data);
							}
							fis.close();
							fos.close();
							   
							// 축소이미지 저장
							File newFile = new File(FILE_LOCAL_PATH + photo);
							File thumbFile = new File(FILE_ROOT + "/files/"+ path +"/"+photoPre +"thumb/"+fileName);
							if (!thumbFile.exists()) {
								thumbFile.mkdirs();
							}
							try {
								ImageUtil.resize(newFile, thumbFile, 200, 0);
								result = true;
							} catch (IOException e) {
								e.printStackTrace();
							}
							
							//복사한뒤 원본파일을 삭제함
							file.delete();
							if(path.equals("profile")){
								userId = F.nullCheck(multi.getParameter("userId"), "");
								userdao.updateProfileImgAdd(userId,"/files/"+ path +"/"+photoPre+fileName);
							}
							
							
					
					map.put("result", true);
					map.put("message", "사진이 등록되었습니다.");
					map.put("photo", "/files/"+ path +"/"+photoPre+fileName);
				
				
				
		}catch (Exception e) {
			map.put("result", false);
			map.put("message", "사진 등록에 실패하였습니다.\n"+e.getMessage());
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);

		Gson gson = new Gson();
		String outputstr = gson.toJson(jsonObject);
		Response.responseWrite(res, outputstr);

		return null;
	
	}
	
	/*프로필삭제*/
	
	@RequestMapping("/m/profile_photo_delete.go")
	public String prodeleteController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletRequest req, HttpServletResponse res
		) {

		Map<String, Object> map = new HashMap<String, Object>();
		
		
		try{
			User user = userdao.getUsers(userId);
			map.put("result", true);
			map.put("message", "삭제되었습니다.");
			
			if (user != null) {
				//파일삭제
				FILE_PATH = "/files/profile/";
			    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;

			    File file = new File(FILE_LOCAL_PATH + user.getFileName());
			    file.delete();
			    
			    FILE_PATH = "/files/profile/thumb/";
			    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;

			    File file2 = new File(FILE_LOCAL_PATH + user.getFileName());
			    file2.delete();
				
				userdao.updateProfileImgDel(userId);

				map.put("message", "프로필 이미지가 삭제되었습니다.");
				map.put("result", true);
			} else {
				map.put("message", "존재하지 않는 ID 입니다.");
				map.put("result", false);
			}
			
		
		}catch(Exception e){
			map.put("result", false);
			map.put("message", e.getMessage());
		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
		
	
	
	
	/**
	 * 로그인
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/login.go")
	public String loginController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId,
			@RequestParam(value="password", required=false, defaultValue="") String password,
			@RequestParam(value="os_version", required=false, defaultValue="") String osVersion,
			@RequestParam(value="os_type", required=false, defaultValue="") String osType,
			@RequestParam(value="device_name", required=false, defaultValue="") String deviceName,
			@RequestParam(value="device_id", required=false, defaultValue="") String deviceId,
			@RequestParam(value="pushKey", required=false, defaultValue="") String pushKey,
			HttpServletRequest req, HttpServletResponse res
		) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		String enPw = "";
		try {
			
			boolean userCheck = userdao.correctId(userId);
			if (userCheck == true) {

				//enPw = Sha256Util.encryptPassword(user.getPassword());
				boolean loginCheck = userdao.correctPw(userId, password);
					
				if (loginCheck == true) {

					User userdata = userdao.getUsers(userId);
					UserBasic userBasic = ubasicdao.getUserBasic(userId);
					HttpSession session = req.getSession();
					session.setAttribute("USER_ID", userdata.getUserId());
					session.setAttribute("USER_NAME", userdata.getUserName());
					
					User uu = new User();
					uu.setUserId(userId);
					uu.setPassword(password);
					uu.setOsType(osType);
					uu.setOsVersion(osVersion);
					uu.setDeviceName(deviceName);
					uu.setDeviceId(deviceId);
					uu.setPushkey(pushKey);
						
					
					userdao.updateUserData(uu);
					
					String birth =userdata.getBirthday();
					int birthyear =  Integer.parseInt(birth.substring(0, 4));
					int nowyear = Integer.parseInt(T.getTodayYear());
					int age =nowyear-birthyear;
					
					map.put("message", "로그인이 성공되었습니다.");
					map.put("result", true);
					map.put("userName", userdata.getUserName());
					map.put("userType", userdata.getUserType());
					map.put("userMed",userdata.getUserMed());
					map.put("age", age);
					map.put("height", userBasic.getHeight());
					map.put("weight", userBasic.getWeight());
					map.put("waist", userBasic.getWaist());
					map.put("smoke", userBasic.getSmoke());
					map.put("blood", userBasic.getBlood());
					map.put("press", userBasic.getPress());
					map.put("col", userBasic.getCol());
					map.put("bloodNum", userBasic.getBloodNum());
					map.put("pulse", userBasic.getPulse());
					map.put("splessure", userBasic.getSplessure());
					map.put("dplessure", userBasic.getDplessure());
					map.put("weightNum", userBasic.getWeightNum());
					map.put("bmi", userBasic.getBmi());

				} else {
					map.put("message", "패스워드가 일치하지 않습니다.");
					map.put("result", false);
					map.put("userType", 3);
				}

			} else {
				map.put("message", "해당 ID가 존재하지 않거나 ID가 일치하지 않습니다.");
				map.put("result", false);
				map.put("userType", 3);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
			map.put("userType", 3);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}	

	/**
	 * 아이디중복체크
	 *  
	 * @return
	 */
	
	@RequestMapping("/m/dup_check_id.go")
	public String checkIdController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId,
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean userCheck = userdao.correctId(userId);
			if (userCheck == true) {

				map.put("message", "중복된 이메일 주소입니다 다른주소로 입력해주세요. "
						+ "지속적인 문제 발생시 (관리자이메일)로 이메일을 보내주세요");
				map.put("result", true);
				

			} else {
				
				map.put("message", "사용가능한 이메일입니다.");
				map.put("result", false);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
		
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		return null;
	}
	
	/**
	 * 전화번호중복체크
	
	 * @return
	 */
	
	@RequestMapping("/m/dup_check_phone.go")
	public String checkPhoneController(
			@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
			HttpServletRequest req, HttpServletResponse res
		) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean phoneCheck = userdao.correctPhone(phoneNumber);
			if (phoneCheck == true) {

				map.put("message", "사용중인 전화번호 입니다.");
				map.put("result", true);
				

			} else {
				
				map.put("message", "사용할 수 있는 전화번호입니다.");
				map.put("result", false);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
			
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		
		return null;
	}
	
	/**
	 * 아이디찾기
	
	 * @return
	 */
		@RequestMapping("/m/myid.go")
		public String searchIdController(
				@RequestParam(value="userName", required=false, defaultValue="") String userName,
				@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
		

			try{
					User user = userdao.findId(phoneNumber,userName);
					
					if ( user!=null) {
						String userId = user.getUserId();
						map.put("message",userId);
						map.put("result", true);
		
					} else {
						map.put("message", "회원님의 ID를 찾을 수 없습니다."
								+"아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
						map.put("result", false);
		
					}
				}catch(Exception e){
					map.put("result", false);
					map.put("message", "error : "+e.getMessage());
					
				}
			 

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		
		/**
		 * 비밀번호찾기
		
		 * @return
		 */
		
		
		@RequestMapping("/m/mypass.go")
		public String searchPwController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();


			boolean userCheck = userdao.findPw(userId, phoneNumber);
			if (userCheck == false) {
				map.put("result", false);
				map.put("message", "회원님의 데이터를 찾을 수 없습니다."
						+"아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
			} else {
				try{
					
					map.put("result", true);
					map.put("message", "비밀번호를 재설정해주세요.");
			    }catch(Exception e){
					map.put("result", false);
					map.put("message", "error : "+e.getMessage());
			    }
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		

	/*	//건강매거진
		
		@RequestMapping("/m/maga_list.go")
		public String magaListController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			User user =userdao.getUsers(userId);
			String joindate = user.getRegDate();
			
			List<Magazine> list =magaginedao.getDoctorMagagineList();
			
			map.put("result", true);
			map.put("joindate", joindate);//가입날짜
			map.put("list", list);
			

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}*/
		
	/*	//매거진
		
		@RequestMapping("/m/maga_health.go")
		public String magaHealthController(
				@RequestParam(value="magaSeq", required=false, defaultValue="") int magaSeq,
				@RequestParam(value="kind", required=false, defaultValue="") int kind, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			if(kind == 0){
				Magazine tdm =magaginedao.getTopMagagine(magaSeq); //상위 컨텐츠
				List<Magazine> sublist =magaginedao.getSubMagagine(magaSeq); //하위 컨텐츠
				map.put("topmagazine", tdm);
				map.put("submagazine", sublist);
				
			}
			else{
				Magazine sdm =magaginedao.getTopMagagine(magaSeq);
				map.put("submagazine", sdm);
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}*/
		
	    
		/* * 수행내역리스트 ////// 1개월 주기 지표
		
		 * @return
		 **/
		
		
		@RequestMapping("/m/maga_report.go")
		public String magaReportController(
				@RequestParam(value="userId", required=false, defaultValue="") String id,
				@RequestParam(value="month", required=false, defaultValue="") String ym, 
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			
			int bcnt= ublooddao.getUserBloodList(id, ym); //혈당갯수
			int pcnt= upressdao.getUserPressList(id, ym); //혈압갯수
			int wcnt= uweightdao.getUserWeightList(id, ym);//체중측정갯수
			UserCnt ucnt = ucntdao.getUserCntList(id, ym);  //해당년월에 목표데이터
			
			
			map.put("blood", bcnt);
			map.put("pressure", pcnt);
			map.put("weight", wcnt);
			map.put("goaldata",ucnt);
			map.put("result", true);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		
		/*뇌심혈관질환 위험도*/
		
		@RequestMapping("/m/cvrisk_list.go")
		public String cvriskController(
				@RequestParam(value="userId", required=false, defaultValue="") String id,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			List<UserCvrisk> list = ucvriskdao.getUserCvriskList(id);
			
			
			map.put("result", true);
			map.put("list",list);
			
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		/*복약관리*/
		
		@RequestMapping("/m/medi_list.go")
		public String mediListController(
				@RequestParam(value="userId", required=false, defaultValue="") String id,
				@RequestParam(value="page", required=false, defaultValue="1") int page,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			int week = T.getWeekdayNum();
			
			List<UserMedi> list = umedidao.getUserMediList(id,week,page,ITEM_COUNT_PER_PAGE);
			
			map.put("result", true);
			map.put("list",list);
			map.put("cnt", umedidao.getUserMedicnt(id,week));
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		/*복약등록*/
		
		@RequestMapping("/m/medi_edit_do.go")
		public String mediEditdoController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="mediname", required=false, defaultValue="") String mediname,
				@RequestParam(value="meditime", required=false, defaultValue="") String meditime,
				@RequestParam(value="medialert", required=false, defaultValue="1") int medialert,
				@RequestParam(value="medihospital", required=false, defaultValue="") String medihospital,
				@RequestParam(value="mediSeq", required=false, defaultValue="0") int mediSeq,
				@RequestParam(value="mediweek1", required=false, defaultValue="0") int mediweek1,
				@RequestParam(value="mediweek2", required=false, defaultValue="0") int mediweek2,
				@RequestParam(value="mediweek3", required=false, defaultValue="0") int mediweek3,
				@RequestParam(value="mediweek4", required=false, defaultValue="0") int mediweek4,
				@RequestParam(value="mediweek5", required=false, defaultValue="0") int mediweek5,
				@RequestParam(value="mediweek6", required=false, defaultValue="0") int mediweek6,
				@RequestParam(value="mediweek7", required=false, defaultValue="0") int mediweek7,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
				UserMedi um = new UserMedi();
				
				um.setMedialert(medialert);
				um.setMedihospital(medihospital);
				um.setMediname(mediname);
				um.setMeditime(meditime);
				um.setUserId(userId);
				um.setMediSeq(mediSeq);
				um.setMediweek1(mediweek1);
				um.setMediweek2(mediweek2);
				um.setMediweek3(mediweek3);
				um.setMediweek4(mediweek4);
				um.setMediweek5(mediweek5);
				um.setMediweek6(mediweek6);
				um.setMediweek7(mediweek7);
				
			try{
				if(mediSeq==0){//신규등록
					
					umedidao.addUserMedi(um);
					
				}else{ //수정
					
					umedidao.updateUserMedi(um);
					
				}
				
				map.put("result", true);
				map.put("message", "완료되었습니다.");
				
				
			}catch(Exception e){
				
				map.put("result", false);
				map.put("message", e.getMessage());
				
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
		/*복약삭제*/
		
		@RequestMapping("/m/medi_delete.go")
		public String medideleteController(
				
				@RequestParam(value="medSeq", required=false, defaultValue="") int medSeq,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			
			try{
				umedidao.deleteUserMedi(medSeq);
				map.put("result", true);
				map.put("message", "삭제되었습니다.");
			
			}catch(Exception e){
				map.put("result", false);
				map.put("message", e.getMessage());
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
		/*처방전관리*/
		
		@RequestMapping("/m/pre_list.go")
		public String preController(
				@RequestParam(value="userId", required=false, defaultValue="") String id,
				@RequestParam(value="page", required=false, defaultValue="") int page,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			List<UserPres> list = upresdao.getUserPresList(id,page,ITEM_COUNT_PER_PAGE);
			
			map.put("list",list);
			map.put("result",true);
			map.put("cnt", upresdao.getUserPresCnt(id));
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
	
		/*처방전등록*/
		

		@RequestMapping("/m/pre_edit_do.go")
		public String preEditdoController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="hosName", required=false, defaultValue="") String hosName,
				@RequestParam(value="fileName", required=false, defaultValue="") String fileName,
				@RequestParam(value="comment", required=false, defaultValue="") String comment,
				@RequestParam(value="preSeq", required=false, defaultValue="0") int preSeq,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
				UserPres up = new UserPres();
				up.setUserId(userId);
				up.setHosName(hosName);
				up.setFileName(fileName);
				up.setComment(comment);
				up.setPreSeq(preSeq);
			try{
				if(preSeq==0){//신규등록
					
					upresdao.addUserPres(up);
					
					
				}else{ //수정
					
					upresdao.updateUserPres(up);
					
				}
				
				map.put("result", true);
				map.put("message", "완료되었습니다.");
				
				
			}catch(Exception e){
				
				map.put("result", false);
				map.put("message", e.getMessage());
				
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}

		
		/*처방전삭제*/
		
		@RequestMapping("/m/pre_delete.go")
		public String predeleteController(
				@RequestParam(value="preSeq", required=false, defaultValue="") int preSeq,
				HttpServletRequest req, HttpServletResponse res
			) {

			Map<String, Object> map = new HashMap<String, Object>();
			
			
			try{
				
				map.put("result", true);
				map.put("message", "삭제되었습니다.");
				
				UserPres userpres = upresdao.UserPresOne(preSeq);
				
				if(userpres.getFileName()!=""){
					
					FILE_PATH = "/files/prescription/";
				    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;

				    File file = new File(FILE_LOCAL_PATH + userpres.getFileName());
				    file.delete();
				    
				    FILE_PATH = "/files/prescription/thumb/";
				    FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;

				    File file2 = new File(FILE_LOCAL_PATH + userpres.getFileName());
				    file2.delete();
				}
				
				upresdao.deleteUserPres(preSeq);
				
			
			}catch(Exception e){
				map.put("result", false);
				map.put("message", e.getMessage());
			}
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
		}
		
	/*	계정관리*/
		
		@RequestMapping("/m/myinfo.go")
		public String myinfoController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";

			try {
				 User user = userdao.getUsers(userId);
				 map.put("data", user);
				 map.put("result", true);
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		
	/*	탈퇴*/
		
		@RequestMapping("/m/myinfo_drop_do.go")
		public String myinfoDropController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="password", required=false, defaultValue="") String password, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			String enPw = "";
			
			try {
				
				enPw = Sha256Util.encryptPassword(password);
				boolean loginCheck = userdao.correctPw(userId, enPw);
				
				if(loginCheck){
					
					ubasicdao.deleteUserBasic(userId);
					ublooddao.deleteUserBlood(userId);
					ucntdao.deleteUserCnt(userId);
					ucvriskdao.deleteUserCvrisk(userId);
					umedidao.deleteUserMedi2(userId);
					upresdao.deleteUserPres2(userId);
					upressdao.deleteUserPress(userId);
					userdao.deleteUser(userId);
					uweightdao.deleteUserWeight(userId);
					ugoaldao.deleteUserGoal(userId);
					ucoldao.deleteUserCol(userId);
					uhbdao.deleteUserhb(userId);
					
					map.put("message", "정상적으로 탈퇴되었습니다.");
					map.put("result", true);
					
					
				}else{
					map.put("message", "비밀번호가 일치하지않습니다");
					map.put("result", false);
					
				}
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		
		//휴대전화변경
		@RequestMapping("/m/myinfo_phone_do.go")
		public String myphoneController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="password", required=false, defaultValue="") String password, 
				@RequestParam(value="phoneNumber", required=false, defaultValue="") String phoneNumber, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			String enPw = "";
			
			try {
				enPw = Sha256Util.encryptPassword(password);
				boolean loginCheck = userdao.correctPw(userId, enPw);
				if(loginCheck){
					
					userdao.editPhone(userId,phoneNumber);
					map.put("message", "변경되었습니다");
					map.put("result", true);
				 
				}else{
					map.put("message", "비밀번호가 일치하지않습니다");
					map.put("result", false);
					
				}
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		//비밀번호재설정
				@RequestMapping("/m/new_mypass.go")
		public String mynpassController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="password", required=false, defaultValue="") String password, 
				HttpServletRequest req, HttpServletResponse res
		) {
					
					Map<String, Object> map = new HashMap<String, Object>();
					boolean result = true;
					String message = "";
					String enPw = "";
					
				try {
						//enPw = Sha256Util.encryptPassword(password);
						
							userdao.updatePw(userId,password);
							map.put("message", "변경되었습니다");
							map.put("result", true);
						 
					} catch (Exception e) {
						map.put("message", "변경에 실패하였습니다.");
						map.put("result", false);
						
					}

					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
					
					return null;
		}
		
		//비밀번호변경
		@RequestMapping("/m/myinfo_pass_do.go")
		public String mypassController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="password", required=false, defaultValue="") String password, 
				@RequestParam(value="npassword", required=false, defaultValue="") String npassword, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			String enPw = "";
			
			try {
				//enPw = Sha256Util.encryptPassword(password);
				boolean loginCheck = userdao.correctPw(userId, password);
				if(loginCheck){
					//enPw = Sha256Util.encryptPassword(npassword);
					userdao.updatePw(userId,npassword);
					map.put("message", "변경되었습니다");
					map.put("result", true);
				 
				}else{
					map.put("message", "비밀번호가 일치하지않습니다");
					map.put("result", false);
					
				}
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}
		
		//문진정보
		
		@RequestMapping("/m/myinfo_med.go")
		public String medController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			
			try {
				   UserBasic ub = ubasicdao.getUserBasic(userId);
				   map.put("data", ub);
				   map.put("result", true);
				 
				
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}


		
		
		//문진수정
		
		@RequestMapping("/m/myinfo_med_edit.go")
		public String medEditController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="gender", required=false, defaultValue="0") int gender, 
				@RequestParam(value="height", required=false, defaultValue="0") int height, 
				@RequestParam(value="weight", required=false, defaultValue="0") int weight, 
				@RequestParam(value="waist", required=false, defaultValue="0") int waist, 
				@RequestParam(value="smoke", required=false, defaultValue="0") int smoke, 
				@RequestParam(value="blood", required=false, defaultValue="") String blood, 
				@RequestParam(value="press", required=false, defaultValue="") String press, 
				@RequestParam(value="col", required=false, defaultValue="") String col, 
				
			    HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
		
			
			try {
				UserBasic ub = new UserBasic();
				ub.setUserId(userId);
				ub.setGender(gender);
				ub.setHeight(height);
				ub.setWeight(weight);
				ub.setWaist(waist);
				ub.setSmoke(smoke);
				ub.setBlood(blood);
				ub.setPress(press);
				ub.setCol(col);
				ubasicdao.addUserBasic(ub);
				map.put("message", "변경되었습니다");
				map.put("result", true);
				 
				
				
			} catch (Exception e) {
				map.put("message", e.getMessage());
				map.put("result", false);
				
			}

			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
		}		
		
		//공지사항
		
		@RequestMapping("/m/service_list.go")
		public String noticeController(
				@RequestParam(value="page", required=false, defaultValue="") int page, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
		
			
			try {
					
					List<Notice>list=noticedao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE );
					int cnt = noticedao.getNoticeMainCount();
					map.put("data", list);
					map.put("cnt", cnt);
					map.put("result", true);
					
					
				} catch (Exception e) {
					map.put("message", e.getMessage());
					map.put("result", false);
					
				}
	
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
				return null;
		}		
		
		
		//공지사항상세
		
		@RequestMapping("/m/service_detail.go")
		public String noticeDController(
				@RequestParam(value="noticeSeq", required=false, defaultValue="") int noticeSeq, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
		
			
			try {
					
					Notice notice = noticedao.getNotice(noticeSeq);
					map.put("data", notice);
					map.put("result", true);
					
					
				} catch (Exception e) {
					map.put("message", e.getMessage());
					map.put("result", false);
					
				}
	
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
				return null;
		}		

		//문진
		
		@RequestMapping("/m/med_exam.go")
		public String medExamController(
				@RequestParam(value="kind", required=false, defaultValue="") int kind, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			List <MedExam>list = medexamdao.getMedExamList(kind);
				for (int i=0; i<list.size(); i++) {
					MedExam me = (MedExam)list.get(i);
					if (me.getAnsType() == 1) {
						List <MedExam> answerList = medexamdao.getMedExamAnswerList(me.getMedSeq(),kind);
						me.setAnswerList(answerList);
						list.set(i, me);
					}
				}
				map.put("list", list);
			    map.put("result", true);
		
			
			
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
				return null;
		}
		
		

		//문진등록
		
		@RequestMapping("/m/med_exam_do.go")
		public String medExamdoController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="gender", required=false, defaultValue="0") int gender, 
				@RequestParam(value="height", required=false, defaultValue="0") int height, 
				@RequestParam(value="weight", required=false, defaultValue="0") int weight, 
				@RequestParam(value="waist", required=false, defaultValue="0") int waist, 
				@RequestParam(value="smoke", required=false, defaultValue="0") int smoke, 
				@RequestParam(value="blood", required=false, defaultValue="") String blood, 
				@RequestParam(value="press", required=false, defaultValue="") String press, 
				@RequestParam(value="col", required=false, defaultValue="") String col, 
				@RequestParam(value="mediname", required=false, defaultValue="") String mediname, 
				@RequestParam(value="meditime", required=false, defaultValue="") String meditime, 
				@RequestParam(value="medialert", required=false, defaultValue="0") String medialert,
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			UserBasic ub =new UserBasic();
			ub.setUserId(userId);
			ub.setGender(gender);
			ub.setHeight(height);
			ub.setWeight(weight);
			ub.setWaist(waist);
			ub.setSmoke(smoke);
			ub.setBlood(blood);
			ub.setPress(press);
			ub.setCol(col);
		
			
			ubasicdao.addUserBasic(ub);
			
			
			if(mediname!=""){
				UserMedi um = new UserMedi();
				um.setMedialert(Integer.parseInt(medialert));
				um.setMediname(mediname);
				um.setMeditime(meditime);
				um.setUserId(userId);
				umedidao.addUserMedi(um);
			}
			
			userdao.updateUser(userId);//문진등록완료
			map.put("result", true);
			map.put("msg","등록완료");
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			return null;
		}
		
		//관리목표 안내로 관리자가 등록한 값을 넘겨준다.
		
		@RequestMapping("/m/management.go")
		public String managementController(
			
				@RequestParam(value="blood", required=false, defaultValue="") String blood, 
				@RequestParam(value="press", required=false, defaultValue="") String press, 
				@RequestParam(value="col", required=false, defaultValue="") String col, 
				@RequestParam(value="weight", required=false, defaultValue="") String weight, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
				if(blood!=""){
					UserGoal ug= ugoaldao.getGoal(blood);
					map.put("blood", ug);
				}
				if(press!=""){
					UserGoal ug=ugoaldao.getGoal(press);
					map.put("press", ug);
				}
				if(col!=""){
					UserGoal ug=ugoaldao.getGoal(col);
					map.put("col", ug);
				}
				if(weight!=""){
					UserGoal ug=ugoaldao.getGoal(weight);
					map.put("weight", ug);
				}
				
				map.put("result", true);
		
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
				return null;
		}
		
		//관리목표설정
		
		@RequestMapping("/m/management_do.go")
		public String medExamdoController(
				
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="blood", required=false, defaultValue="") String blood, 
				@RequestParam(value="press", required=false, defaultValue="") String press, 
				@RequestParam(value="col", required=false, defaultValue="") String col, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			List<UserGoal>list = new ArrayList();
			UserGoal usergoal = new UserGoal();
			usergoal.setUserId(userId);
			
			if(blood!=""){//혈당
				
				UserGoal bg = ugoaldao.getGoal("blood");
				
				usergoal.setGoalsMblood(bg.getGoalsMblood());
				usergoal.setGoalbMblood(bg.getGoalbMblood());
				usergoal.setGoalEblood(bg.getGoalEblood());
				usergoal.setGoalSblood(bg.getGoalSblood());
				usergoal.setGoalHba(bg.getGoalHba());
				
			
				
			}

			if(press!=""){//혈압
			
				UserGoal mg = ugoaldao.getGoal("press");
				
			

				usergoal.setGoalsPre(mg.getGoalsPre());
				usergoal.setGoalbPre(mg.getGoalbPre());
				usergoal.setGoalPul(mg.getGoalPul());
				
				
			}

			if(col!=""){//콜레스테롤 고지혈증
				
				UserGoal dg = ugoaldao.getGoal("col");
				
				usergoal.setGoalCol(dg.getGoalCol());
				usergoal.setGoalLdl(dg.getGoalLdl());
				usergoal.setGoalHdl(dg.getGoalHdl());
				usergoal.setGoalTg(dg.getGoalTg());
			
				
			}
			UserGoal wg = ugoaldao.getGoal("weight");
			usergoal.setGoalbBmi(wg.getGoalbBmi());
			usergoal.setGoalsBmi(wg.getGoalsBmi());
			 
			 ugoaldao.addUserGoal(usergoal);
			 map.put("result", true);
			 map.put("msg","등록완료");
			 map.put("data", ugoaldao.getuserGoal(userId));
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			return null;
		}		
		
		//지표관리설정(질문 답)
		
		@RequestMapping("/m/pointer_do.go")
		public String pointerController(
				
				@RequestParam(value="diseaseId", required=false, defaultValue="") String diseaseId, 
				
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
				
				
			
				
				List <Pointer>list = pointerdao.getPointer(diseaseId);
				for (int i=0; i<list.size(); i++) {
					Pointer pointer = (Pointer)list.get(i);
					if (pointer.getAnsType() == 1) {
						List <Pointer> answerList = pointerdao.getPointerAnswerList(pointer.getComSeq());
						pointer.setAnswerList(answerList);
						list.set(i, pointer);
					}
				}
				map.put("data", list);
				
		/*		//혈압리스트
				List <Pointer>list2 = pointerdao.getPointer(press);
				for (int i=0; i<list2.size(); i++) {
					Pointer pointer = (Pointer)list2.get(i);
					if (pointer.getAnsType() == 1) {
						List <Pointer> answerList = pointerdao.getPointerAnswerList(pointer.getComSeq());
						pointer.setAnswerList(answerList);
						list2.set(i, pointer);
					}
				}
				map.put("press", list2);
				
				//당화혈색소추가 (당뇨병환자만)
				
				if(blood!=""){
					
					List <Pointer>list3 = pointerdao.getPointer("hba");
					for (int i=0; i<list3.size(); i++) {
						Pointer pointer = (Pointer)list3.get(i);
						if (pointer.getAnsType() == 1) {
							List <Pointer> answerList = pointerdao.getPointerAnswerList(pointer.getComSeq());
							pointer.setAnswerList(answerList);
							list3.set(i, pointer);
						}
					}
					map.put("hba", list3);
					
				}
				
				//체중리스트
				
				List <Pointer>list4 = pointerdao.getPointer("weight");
				for (int i=0; i<list4.size(); i++) {
					Pointer pointer = (Pointer)list4.get(i);
					if (pointer.getAnsType() == 1) {
						List <Pointer> answerList = pointerdao.getPointerAnswerList(pointer.getComSeq());
						pointer.setAnswerList(answerList);
						list4.set(i, pointer);
					}
				}
				map.put("weight", list4);				
				
				
			
			
			if(col!=""){//콜레스테롤 고지혈증 (해당 환자만 측정)
				
				List <Pointer>list3 = pointerdao.getPointer(col);
				for (int i=0; i<list3.size(); i++) {
					Pointer pointer = (Pointer)list3.get(i);
					if (pointer.getAnsType() == 1) {
						List <Pointer> answerList = pointerdao.getPointerAnswerList(pointer.getComSeq());
						pointer.setAnswerList(answerList);
						list3.set(i, pointer);
					}
				}
				map.put("col", list3);
			
			}*/
			 
			
			 	map.put("result", true);
			
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
				return null;
		}
		
		

		
		
		//혈당등록
		@RequestMapping("/m/pointer_bloodinsert.go")
		public String pbloodController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="bloodTime", required=false, defaultValue="0") int bloodTime, 
				@RequestParam(value="bloodKind", required=false, defaultValue="0") int bloodKind, 
				@RequestParam(value="bloodNum", required=false, defaultValue="0") int bloodNum, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			UserBlood ub = new UserBlood();
			ub.setUserId(userId);
			ub.setBloodTime(bloodTime);
			ub.setBloodKind(bloodKind);
			ub.setBloodNum(bloodNum);
			ublooddao.addUserBlood(ub);
			
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			
			return null;
			
		}
		
		//혈압등록
		@RequestMapping("/m/pointer_pressinsert.go")
		public String ppressController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="pulse", required=false, defaultValue="0") int pulse, 
				@RequestParam(value="splessure", required=false, defaultValue="0") int splessure, 
				@RequestParam(value="dplessure", required=false, defaultValue="0") int dplessure, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			 UserPress up = new UserPress();
			 up.setUserId(userId);
			 up.setPulse(pulse);
			 up.setSplessure(splessure);
			 up.setDplessure(dplessure);
			 upressdao.addUserPress(up);
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			
			return null;
			
		}	
		
		
		
		//콜레스테롤
		@RequestMapping("/m/pointer_colinsert.go")
		public String pcolController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="col", required=false, defaultValue="0") int col, 
				@RequestParam(value="ldl", required=false, defaultValue="0") int ldl, 
				@RequestParam(value="tg", required=false, defaultValue="0") int tg, 
				@RequestParam(value="hdl", required=false, defaultValue="0") int hdl, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			
			 UserCol uc = new UserCol();
			 uc.setCol(col);
			 uc.setHdl(hdl);
			 uc.setLdl(ldl);
			 uc.setTg(tg);
			 uc.setUserId(userId);
			 ucoldao.addUserCol(uc);
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			
			return null;
			
		}	
		
		//체중등록
		@RequestMapping("/m/pointer_weinsert.go")
		public String pweiController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="weightNum", required=false, defaultValue="0") int weightNum, 
				@RequestParam(value="bmi", required=false, defaultValue="0") double bmi, 
				HttpServletRequest req, HttpServletResponse res
			) {
			 UserWeight uw = new UserWeight();
			 uw.setWeightNum(weightNum);
			 uw.setBmi(bmi);
			 uw.setUserId(userId);
			 uweightdao.addUserWeight(uw);
			 Map<String, Object> map = new HashMap<String, Object>();
			 
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
			
			return null;
			
		}
		
		//당화혈색소등록
		@RequestMapping("/m/pointer_hbinsert.go")
		public String phController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId, 
				@RequestParam(value="hbaNum", required=false, defaultValue="0") int hbaNum, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			 Userhb hb = new Userhb();
			 hb.setHbaNum(hbaNum);
			 hb.setUserId(userId);
			 uhbdao.addUserhb(hb);
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			 
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
				
		
			return null;
			
		}
		

		
		

		//지표결과 전송 
		@RequestMapping("/m/pointer_result.go")
		public String phController(
				@RequestParam(value="commentCode", required=false, defaultValue="") int commentCode, 
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			boolean result = true;
			String message = "";
			
			map.put("data", commentdao.getComment(commentCode));
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			return null;
			
		}	

		//관리주기안내 
		@RequestMapping("/m/period.go")
		public String periodController(
				@RequestParam(value="kind", required=false, defaultValue="") int kind,
				@RequestParam(value="blood", required=false, defaultValue="") String blood, 
				@RequestParam(value="press", required=false, defaultValue="") String press, 
				@RequestParam(value="col", required=false, defaultValue="") String col, 
			
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
			
			
			
				 //질문
				
				List <Period>list = perioddao.getPeriod(kind);
				for (int i=0; i<list.size(); i++) {
					Period period = (Period)list.get(i);
					
					List <Period> answerList = perioddao.getPeriodAnswerList(period.getPreSeq());
					period.setAnswerList(answerList);
					list.set(i, period);
				
				}
				//질문답변담음
				map.put("list", list);
				
				map.put("blood",perioddao.getPeriodAnswer(blood)); //결과값
				map.put("press",perioddao.getPeriodAnswer(press));
				map.put("col",perioddao.getPeriodAnswer(col));
				map.put("weight",perioddao.getPeriodAnswer("weight"));
				
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			
			
			return null;
			
		}
		
		//관리주기 등록/변경
		
		@RequestMapping("/m/period_into/{diseaseId}.go")
		public String phController(
				@PathVariable("diseaseId") String dId,
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="press", required=false, defaultValue="") String press,
			
				HttpServletRequest req, HttpServletResponse res
			) {
		

			if(dId.equals("first")){ //최초등록
				UserCnt uc = new UserCnt();
				uc.setUserId(userId);
				ucntdao.addUserCnt(uc);
			}else{
				 if(dId.equals("blood")){//관리주기변경
				
					ucntdao.upUserbCnt(userId,4);
				 }
				 else if(dId.equals("press")){
					 if(press!="")//질환자이면
					 {
						 ucntdao.upUserpCnt(userId,0.5);
					 }
					 else{
						 ucntdao.upUserpCnt(userId,1);
					 }
				 }
			}
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("result", true);
			 map.put("msg","등록완료");
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
		
			return null;
			
		}
		
		//관리주기변경안내
		@RequestMapping("/m/period_edit.go")
		public String periodCController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="diseaseId", required=false, defaultValue="") String diseaseId,
				@RequestParam(value="press", required=false, defaultValue="") String press,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				String today = T.getToday(); // "2015-10-12"
				
			
				if(diseaseId.equals("blood")){
				String before =T.getDateAdd(today, -3);
				//사용자가 데이터를 3일 이상 연속 입력했는지확인
				int cnt = ublooddao.getUserBloodcnt(userId, today, before, 3);
					
				if(cnt>2){
				List <Cperiod>list = cperioddao.getCperiod("blood",0);
					for (int i=0; i<list.size(); i++) {
						Cperiod cp = (Cperiod)list.get(i);
			
						List <Cperiod> answerList = cperioddao.getCperiodAnswerList(cp.getCperSeq());
						cp.setAnswerList(answerList);
						list.set(i, cp);
					
					}
					map.put("blood", list);
					map.put("result", true);
				}else{
					map.put("msg", "해당없음");
					map.put("result", false);
				}
			}else{
				String before =T.getDateAdd(today, -29);
				int cnt = upressdao.getUserPresscnt(userId, today, before);
				if(cnt>3){
					if(press!="")//질환자이면	
					{
						List <Cperiod>list2 = cperioddao.getCperiod("press",1);
				
						for (int i=0; i<list2.size(); i++) {
							Cperiod cp = (Cperiod)list2.get(i);
				
							List <Cperiod> answerList = cperioddao.getCperiodAnswerList(cp.getCperSeq());
							cp.setAnswerList(answerList);
							list2.set(i, cp);
						
						}
						map.put("press", list2);
					}else{
						
						List <Cperiod>list2 = cperioddao.getCperiod("press",0);
						
						for (int i=0; i<list2.size(); i++) {
							Cperiod cp = (Cperiod)list2.get(i);
				
							List <Cperiod> answerList = cperioddao.getCperiodAnswerList(cp.getCperSeq());
							cp.setAnswerList(answerList);
							list2.set(i, cp);
						
						}
						map.put("press", list2);
					}
					map.put("result", true);
				}else{
					map.put("msg", "해당없음");
					map.put("result", false);
				}
					
			}
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
					
			return null;
			
		}

		//기간내 미입력
		@RequestMapping("/m/period_err.go")
		public String periodEController(
				@RequestParam(value="kcase", required=false, defaultValue="0") int kcase,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
			
			
				List <Eperiod>list = eperioddao.getEperiod(kcase) ;
					for (int i=0; i<list.size(); i++) {
						Eperiod ep = (Eperiod)list.get(i);
			
						List <Eperiod> answerList = eperioddao.getEperiodAnswerList(ep.getEperSeq()) ; 
						ep.setAnswerList(answerList);
						list.set(i, ep);
					
					}
					map.put("list", list);
					
					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
					
			
					
			return null;
			
		}	
		
		//cvrisk 안내
		@RequestMapping("/m/cvrisk.go")
		public String cvriskintController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				UserCol uc = null;
				//콜레스테롤이 있는지 없는지 판별
				uc= ucoldao.getUsertopCol(userId);
				
				boolean kind=false; 
				int kindd  = 0;
				if(uc!=null){//있으면
					kind=true;
					kindd=1;
					map.put("user", uc);
					
				}
				
					List <Cvrisk>list = cvriskdao.getCvrisk(kindd) ;
					for (int i=0; i<list.size(); i++) {
						Cvrisk cv = (Cvrisk)list.get(i);
			
						List <Cvrisk> answerList = cvriskdao.CvriskAnswerList(cv.getCvSeq(),kindd) ; 
						cv.setAnswerList(answerList);
						list.set(i, cv);
					}
					map.put("result", true);
					map.put("kind", kind);
					map.put("list", list);
					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
					return null;
			
		}		
		
		//cvrisk 계산
		@RequestMapping("/m/cvrisk_cal.go")
		public String cvriskcalController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="col", required=false, defaultValue="") int col,
				@RequestParam(value="hdl", required=false, defaultValue="") int hdl,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				
				String message = "";
				int result=0;
				int tage=0;
				///계산식
				String birth = userdao.getUsers(userId).getBirthday();
				int birthyear =  Integer.parseInt(birth.substring(0, 4));
				int nowyear = Integer.parseInt(T.getTodayYear());
				tage = (nowyear-birthyear)+10;
				
				
				map.put("tage", tage);
				map.put("data", result);
				map.put("result", true);
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				return null;
			
		}	
		
		
		
		//cvrisk 등록
		@RequestMapping("/m/cvrisk_insert.go")
		public String cvriskController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="cvNum", required=false, defaultValue="0") int cvNum,
				@RequestParam(value="userTage", required=false, defaultValue="0") int userTage,
				@RequestParam(value="col", required=false, defaultValue="0") int col,
				@RequestParam(value="hdl", required=false, defaultValue="0") int hdl,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				UserCvrisk uc = new UserCvrisk();
				uc.setCol(col);
				uc.setHdl(hdl);
				uc.setCvNum(cvNum);
				uc.setUserId(userId);
				uc.setUserTage(userTage);
				ucvriskdao.addUserCvrisk(uc);
				map.put("result", true);
			    map.put("msg","등록완료");			
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			
			return null;
		}	

		//1일컨텐츠
		@RequestMapping("/m/daycontents.go")
		public String dayController(
				@RequestParam(value="daygroup", required=false, defaultValue="") String daygroup,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
			
			
				List <Day> list = daydao.getDaylist(daygroup) ;
					for (int i=0; i<list.size(); i++) {
						Day dd = (Day)list.get(i);
						if(dd.getAnsType()==1){
							List <Day> answerList = daydao.getDayAnswerList(dd.getDaySeq(),daygroup); 
							dd.setAnswerList(answerList);
							list.set(i, dd);
						}
					}
					map.put("list", list);
					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
			return null;
			
		}
		//1주컨텐츠
		@RequestMapping("/m/weekcontents.go")
		public String weekController(
				@RequestParam(value="weekgroup", required=false, defaultValue="") String weekgroup,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
			
			
				List <Week>list = weekdao.getWeeklist(weekgroup) ;
					for (int i=0; i<list.size(); i++) {
						Week ww = (Week)list.get(i);
						if(ww.getAnsType()==1){
							List <Week> answerList = weekdao.getWeekAnswerList(ww.getWeekSeq(),weekgroup); 
							ww.setAnswerList(answerList);
							list.set(i, ww);
						}
					}
					map.put("list", list);
					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
			return null;
			
		}
		//1주 지표 들어옴
		@RequestMapping("/m/week_intro.go")
		public String weekintroController(
				
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				HttpServletRequest req, HttpServletResponse res
			) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			String today = T.getToday(); // "2015-10-12"
			String before =T.getDateAdd(today, -7);
			int bloodcnt = ublooddao.getUserBloodcnt(userId, today, before);
			int presscnt = upressdao.getUserPresscnt(userId, today, before);
			int weightcnt = uweightdao.getUserWeightcnt(userId, today, before);
			boolean result=false;
			if(bloodcnt>0||presscnt>0||weightcnt>0){
			      result =true;
			}
			
			map.put("result", result);
			
			JSONObject jsonObject = JSONObject.fromObject(map);
			Response.responseWrite(res, jsonObject);
			
			return null;
			
		}
		
		
		
		//1주지표안내분석
		@RequestMapping("/m/week/{dId}.go")
		public String weekmaController(
				@PathVariable("dId") String dId,
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="kind", required=false, defaultValue="0") int kind,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				String today = T.getToday(); // "2015-10-12"
				String before =T.getDateAdd(today, -7);
			try{	
				if(dId.equals("first")){
				
					
					int bloodcnt = ublooddao.getUserBloodcnt(userId, today, before);//총 측정 횟수
					int presscnt = upressdao.getUserPresscnt(userId, today, before);
					int weightcnt = uweightdao.getUserWeightcnt(userId, today, before);
					UserCnt ucnt = ucntdao.getUserCntList(userId);
					map.put("bloodcnt", bloodcnt);
					map.put("presscnt", presscnt);
					map.put("weightcnt", weightcnt);
					if(ucnt==null){
						map.put("ucnt",0);//목표측정횟수가없으면
					}else{
						map.put("ucnt", ucnt);
					}
					
				}else if(dId.equals("blooddetail")){
					int gong = ublooddao.getUserBloodcnt(userId, today, before, 1); //공복 측정횟수
					map.put("gong", gong);
					int sik =  ublooddao.getUserBloodcnt(userId, today, before, 2);//식후 측정횟수
					map.put("sik", sik);
					int sleep=ublooddao.getUserBloodcnt(userId, today, before, 3);//취침전 측정횟수
					map.put("sleep", sleep);
					
					
				}
				else{
					int code=0;
					int code2=0;
					UserGoal ug =ugoaldao.getuserGoal(userId);
				    //map.put("goal", ug);
				    int goaldata =0;
					if(dId.equals("blood")){
							//공복
						    if(kind==1){
								
								int gongavg = ublooddao.getUserBloodavg(userId, today, before, 1);
								map.put("myavg", gongavg);
							
								//타인
								int ogongavg= ublooddao.getotherBloodavg( today, before, 1);
								map.put("oavg", ogongavg);
								goaldata = ug.getGoalbMblood();
								
								///타사용자대비
								code = wkpointer.code1(gongavg, ogongavg);
								code2 =wkpointer.code2(goaldata,gongavg);
							
							//식후		
						    }else if(kind==2){
							
								
								int sikavg = ublooddao.getUserBloodavg(userId, today, before, 2);
								map.put("myavg", sikavg);
							
								//타인
								int osikavg= ublooddao.getotherBloodavg( today, before, 2);
								map.put("oavg", osikavg);
								
								
								goaldata = ug.getGoalEblood();
								code = wkpointer.code1(sikavg, osikavg);
								code2 = wkpointer.code2(goaldata,sikavg);
								
							//취침전
						    }else{
							
							
								int sleepavg = ublooddao.getUserBloodavg(userId, today, before, 3);
								map.put("myavg", sleepavg);
						
								//타인취침전리스트
								int osleepavg=ublooddao.getotherBloodavg(today, before, 3);
								map.put("oavg", osleepavg);
								
								goaldata = ug.getGoalSblood();
								code = wkpointer.code1(sleepavg, osleepavg);
								code2 = wkpointer.code2(goaldata, sleepavg);
								
							
						    }
					}
					if(dId.equals("press")){
							//내꺼
							
						    int mydavg = upressdao.getUserPressavg(userId, today, before,"dplessure"); //이완기평균
							int mysavg = upressdao.getUserPressavg(userId, today, before,"splessure"); //수축기평균
							map.put("mydavg", mydavg);
							map.put("mysavg", mysavg);
							
							//타인
							int odavg =upressdao.getotherPressavg(today, before,"dplessure"); //이완기평균
							int osavg =upressdao.getotherPressavg(today, before,"splessure"); //수축기평균
							map.put("odavg", odavg);
							map.put("osavg", osavg);
							
						
							goaldata= ug.getGoalbPre();
						
							
							code = wkpointer.code1(mydavg, odavg);
							code2= wkpointer.code2(goaldata,  mydavg);
						
							
					}
					if(dId.equals("weight")){
							
							//내꺼
							int mybmiavg = uweightdao.getUserWeighavg(userId, today, before); //평균
							map.put("myavg", mybmiavg);
							//타인
							int obmiavg = uweightdao.getotherWeighavg(today, before); //평균
							map.put("oavg", obmiavg);
							
						
							goaldata= ug.getGoalbBmi();
							
							
							code = wkpointer.code1(mybmiavg, obmiavg);
							code2 = wkpointer.code2(goaldata,mybmiavg);
						
							
					}
					Analisys an = anlisysdao.getAnalisys(code);
					String comment =an.getComment();
					map.put("firstcomment", comment);
					Analisys an2 = anlisysdao.getAnalisys(code2);
					String comment2 =an2.getComment();
					map.put("secondcomment", comment2);
					map.put("result",true);
					map.put("goal", goaldata);
				}
			}catch(Exception e){
				map.put("result",false);
				map.put("msg", "데이터가 없어 비교할수 없습니다.");
				
			}
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
				
			return null;
			
		}
		
/*		//1주 지표결과
		@RequestMapping("/m/result.go")
		public String wresultController(
				@RequestParam(value="period", required=false, defaultValue="") int period,
				@RequestParam(value="code", required=false, defaultValue="") int code,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				
				Analisys an=  anlisysdao.getAnalisys(code, period);
				
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
					
			return null;
			
		}*/
		
		
		
	/*	//1개월컨텐츠
		@RequestMapping("/m/monthcontents.go")
		public String monthController(
				//@RequestParam(value="month", required=false, defaultValue="") String month,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				String today = T.getMonth();
			    System.out.println(today);
				List <Magazine>list = magaginedao.getmglist(today) ;
					for (int i=0; i<list.size(); i++) {
						Magazine dm = (Magazine)list.get(i);
						if(dm.getAnsType()==1){
							List <Magazine> answerList = magaginedao.getmagaAnswerList(dm.getMagaSeq()); 
							dm.setAnswerList(answerList);
							list.set(i, dm);
						}
					
					}
					map.put("list", list);
					JSONObject jsonObject = JSONObject.fromObject(map);
					Response.responseWrite(res, jsonObject);
					
			return null;
			
		}
		
		//1개월지표안내
		@RequestMapping("/m/monthresult.go")
		public String monthrtController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
			
			
				List <Magazine>list = magaginedao.getmonMagagine() ;
					for (int i=0; i<list.size(); i++) {
						Magazine dm = (Magazine)list.get(i);
			
						List <Magazine> answerList = magaginedao.getmonAnswerList(dm.getMagaSeq()); 
						dm.setAnswerList(answerList);
						list.set(i, dm);
					
					}
					
				String today = T.getMonth(); // "2015-10"
			
				int bloodcnt = ublooddao.getUserBloodList(userId, today);
				int presscnt = upressdao.getUserPressList(userId, today);
				int weightcnt = uweightdao.getUserWeightList(userId, today);
				UserCnt ucnt = ucntdao.getUserCntList(userId,today);
					
				map.put("bloodcnt", bloodcnt);
				map.put("presscnt", presscnt);
				map.put("weightcnt", weightcnt);
				map.put("ucnt", ucnt);	
				map.put("list", list);
					
					
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
					
			return null;
			
		}*/

		
		//혈당차트
		@RequestMapping("/m/chartblood.go")
		public String chartbController(
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="kind", required=false, defaultValue="0") int kind,
				@RequestParam(value="page", required=false, defaultValue="1") int page,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				String today = T.getToday(); // "2015-10-12"
				String before =""; // 기간세팅
				before=T.getDateAdd(today, -30);
				map.put("gongavg", ublooddao.getUserBloodavg(userId,today, before, 1));
				map.put("eatavg", ublooddao.getUserBloodavg(userId,today, before, 2));
				map.put("sleepavg", ublooddao.getUserBloodavg(userId,today, before, 3));
				
				
					
				List<UserBlood>list =ublooddao.getUserBlood(userId,kind,page,ITEM_COUNT_PER_PAGE);
				map.put("list", list);
				map.put("cnt", ublooddao.getBloodcnt(userId,kind));
				
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			return null;
			
		}
		
		//차트
		@RequestMapping("/m/chart/{dId}.go")
		public String chartController(
				@PathVariable("dId") String dId,
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="page", required=false, defaultValue="1") int page,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				String today = T.getToday(); // "2015-10-12"
				String before =""; // 기간세팅
				before=T.getDateAdd(today, -30);
				
				if(dId.equals("pressure")){
					map.put("dpress",upressdao.getUserPressavg(userId,today, before, "dplessure") );//이완기
					map.put("spress",upressdao.getUserPressavg(userId,today, before, "splessure") );//수축기
					
					List<UserPress>list =upressdao.getUserPress(userId,page,ITEM_COUNT_PER_PAGE);
					map.put("cnt", upressdao.getUserPresscnt(userId));
					map.put("list", list);
				}else if(dId.equals("weight")){
					map.put("weightavg", uweightdao.getUseravg(userId, today, before));
					map.put("bmiavg", uweightdao.getUserWeighavg(userId, today, before));
					
					List<UserWeight>list =uweightdao.getUserWeight(userId,page,ITEM_COUNT_PER_PAGE);
					map.put("list", list); 
					map.put("cnt", uweightdao.getUserWeightcnt(userId));
				}else if(dId.equals("col")){
					
					List<UserCol>list = ucoldao.getUserCol(userId,page,ITEM_COUNT_PER_PAGE);
					map.put("list", list);  
					map.put("cnt", ucoldao.getUserColcnt(userId));
				}else if(dId.equals("hba")){
					List<Userhb>list =uhbdao.getUserHba(userId,page,ITEM_COUNT_PER_PAGE);
					map.put("list", list);
					map.put("cnt", uhbdao.getUserHbacnt(userId));
				}
				
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			return null;
			
		}		
		
		//차트삭제
		@RequestMapping("/m/delete/{dId}.go")
		public String chartdelController(
				@PathVariable("dId") String dId,
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="Seq", required=false, defaultValue="") int Seq,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				
				if(dId.equals("blood")){
					ublooddao.deleteUserBlood(Seq);
				}
				else if(dId.equals("pressure")){
					upressdao.deleteUserPress(Seq);
					
				}else if(dId.equals("weight")){
					uweightdao.deleteUserWeight(Seq);
					
				}else if(dId.equals("col")){
					ucoldao.deleteUserCol(Seq);
					
				}else if(dId.equals("hba")){
					uhbdao.deleteUserhb(Seq);
				}
				
				map.put("result", true);
				map.put("msg","삭제되었습니다");
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			return null;
			
		}
		
		//그래프
		@RequestMapping("/m/g/{dId}.go")
		public String graController(
				@PathVariable("dId") String dId,
				@RequestParam(value="userId", required=false, defaultValue="") String userId,
				@RequestParam(value="period", required=false, defaultValue="") int period,
				HttpServletRequest req, HttpServletResponse res
			) {
			
				Map<String, Object> map = new HashMap<String, Object>();
				boolean result = true;
				String message = "";
				
				String today = T.getToday(); // "2015-10-12"
				String before =""; // 기간세팅
				if(period==1) before=T.getDateAdd(today, -7);
				else if(period==2) before=T.getDateAdd(today, -30);
				else if(period==3) before=T.getDateAdd(today, -90);
				else if(period==4) before=T.getDateAdd(today, -180);
				
				
				
				if(dId.equals("blood")){
					List<UserBlood>list =ublooddao.getUserBlood(userId, today, before);
					map.put("list", list);
				}
				else if(dId.equals("pressure")){
					List<UserPress>list =upressdao.getUserPress(userId, today, before);
					map.put("list", list);
				
				}else if(dId.equals("weight")){
					List<UserWeight>list =uweightdao.getUserWeight(userId, today, before);
					map.put("list", list);
					
				}else if(dId.equals("col")){
					List<UserCol>list =ucoldao.getUserCol(userId, today, before);
					map.put("list", list);
					
				}else if(dId.equals("hba")){
					List<Userhb>list =uhbdao.getUserHba(userId, today, before);
					map.put("list", list);
				}
				
				
				map.put("goal", ugoaldao.getuserGoal(userId));
				map.put("result", true);
		
				JSONObject jsonObject = JSONObject.fromObject(map);
				Response.responseWrite(res, jsonObject);
			return null;
			
		}			
		
}
